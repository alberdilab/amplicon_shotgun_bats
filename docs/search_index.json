[["index.html", "AlberdiLab | Aizpurua et al. 2025 Bats microbiota using amplicon and shotgun Chapter 1 Introduction 1.1 Prepare the R environment", " AlberdiLab | Aizpurua et al. 2025 Bats microbiota using amplicon and shotgun Ostaizka Aizpurua1 Antton Alberdi2 2025-02-05 Chapter 1 Introduction This webbook contains all the code used for data analysis in study of gut microbiomes of newts across ponds included in a restoration plan. 1.1 Prepare the R environment 1.1.1 Environment To reproduce all the analyses locally, clone this repository in your computer using: RStudio &gt; New Project &gt; Version Control &gt; Git And indicating the following git repository: https://github.com/alberdilab/amplicon_shotgun_bats.git Once the R project has been created, follow the instructions and code chunks shown in this webbook. 1.1.2 Libraries The following R packages are required for the data analysis. # Base library(R.utils) library(knitr) library(tidyverse) library(devtools) library(tinytable) library(rairtable) library(janitor) # For tree handling library(ape) library(phyloseq) library(phytools) # For plotting library(ggplot2) library(ggrepel) library(ggpubr) library(ggnewscale) library(gridExtra) library(ggtreeExtra) library(ggtree) library(ggh4x) library(UpSetR) # For statistics library(decontam) library(spaa) library(vegan) library(Rtsne) library(geiger) library(hilldiv2) library(distillR) library(ANCOMBC) library(lme4) library(nlme) library(pairwiseAdonis) library(emmeans) library(hilldiv2) University of Copenhagen, ostaizka.aizpurua@sund.ku.dk↩︎ University of Copenhagen, antton.alberdi@sund.ku.dk↩︎ "],["metagenomics.html", "Chapter 2 Metagenomics 2.1 Load raw data 2.2 Read counts 2.3 Genome counts 2.4 Sample metadata 2.5 Genome metadata 2.6 Genome tree 2.7 Preprocessing info 2.8 Genome annotations 2.9 Genome functions distillation 2.10 Phyloseq object 2.11 Prepare color scheme", " Chapter 2 Metagenomics 2.1 Load raw data counts_raw &lt;- read_tsv(&quot;resources/metagenomics/all_species_unfiltered_count_table.txt&quot;) %&gt;% rename(genome=1) genomes_length &lt;- counts_raw[,c(1,4)] %&gt;% rename(length=2) 2.2 Read counts ## Melt dataframe counts_raw1 &lt;- counts_raw # Duplicate data colnames(counts_raw1) &lt;- gsub(&quot;\\\\.&quot;, &quot; &quot;, colnames(counts_raw1)) molten_table &lt;- counts_raw1 %&gt;% pivot_longer(!genome, names_to = c(&quot;sample&quot;, &quot;.value&quot;), names_sep = &quot; &quot;) %&gt;% dplyr::rename(&quot;read_count&quot; = &quot;Read&quot;) %&gt;% dplyr::rename(&quot;covered_fraction&quot; = &quot;Covered&quot;) %&gt;% dplyr::rename(&quot;MAG_length&quot; = &quot;Length&quot;) read_counts &lt;- molten_table %&gt;% select(genome, sample, read_count) %&gt;% pivot_wider(names_from = &quot;sample&quot;, values_from = &quot;read_count&quot;)%&gt;% column_to_rownames(., &quot;genome&quot;) %&gt;% filter(rowSums(. != 0, na.rm = TRUE) &gt; 0) %&gt;% select_if(~!all(. == 0))%&gt;% rownames_to_column(., &quot;genome&quot;) 2.3 Genome counts genome_counts_filt &lt;- molten_table %&gt;% mutate(read_count = if_else(covered_fraction &lt; 0.3, 0, read_count)) %&gt;% #normalise by read/MAG length mutate(read_count = read_count*150/MAG_length) %&gt;% select(genome, sample, read_count) %&gt;% pivot_wider(names_from = sample, values_from = read_count) %&gt;% rename(genome=1)%&gt;% column_to_rownames(., &quot;genome&quot;) %&gt;% filter(rowSums(. != 0, na.rm = TRUE) &gt; 0) %&gt;% select_if(~!all(. == 0)) %&gt;% rownames_to_column(., &quot;genome&quot;) readlength=150 genome_counts &lt;- read_counts %&gt;% arrange(match(genome,genomes_length$genome))%&gt;% mutate(across(where(is.numeric), ~ . / (genomes_length$length / readlength) ))%&gt;% column_to_rownames(., &quot;genome&quot;) %&gt;% filter(rowSums(. != 0, na.rm = TRUE) &gt; 0) %&gt;% select_if(~!all(. == 0)) %&gt;% rownames_to_column(., &quot;genome&quot;) 2.4 Sample metadata sample_metadata &lt;- read_tsv(&quot;resources/metagenomics/metadata.tsv&quot;) %&gt;% rename(sample=1) genome_counts_filt_r &lt;- genome_counts_filt %&gt;% column_to_rownames(., &quot;genome&quot;) sample_metadata &lt;- sample_metadata[match(colnames(genome_counts_filt_r), sample_metadata$sample), ] 2.5 Genome metadata genome_metadata &lt;- read_tsv(&quot;resources/metagenomics/all_together_gtdbtk.tsv&quot;) %&gt;% rename(genome=1)%&gt;% mutate(genome = str_replace(genome, &quot;\\\\.fa$&quot;, &quot;&quot;))%&gt;%#mutate(genome = gsub(&quot;.fa&quot;,&quot;&quot;,genome)) semi_join(., genome_counts_filt, by = &quot;genome&quot;) %&gt;% arrange(match(genome,genome_counts_filt$genome))%&gt;% mutate(classification = str_replace_all(classification, &quot;.__&quot;, &quot;&quot;)) %&gt;% separate(col = classification, sep = &quot;;&quot;, into = c(&quot;domain&quot;, &quot;phylum&quot;, &quot;class&quot;, &quot;order&quot;, &quot;family&quot;, &quot;genus&quot;, &quot;species&quot;))%&gt;% left_join(., genomes_length, by=join_by(genome==genome))%&gt;% mutate(phylum = case_when( phylum == &quot;Actinobacteriota&quot; ~ &quot;Actinomycetota&quot;, phylum == &quot;Firmicutes&quot; ~ &quot;Bacillota&quot;, phylum == &quot;Firmicutes_A&quot; ~ &quot;Bacillota_A&quot;, phylum == &quot;Firmicutes_C&quot; ~ &quot;Bacillota_C&quot;, phylum == &quot;Cyanobacteria&quot; ~ &quot;Cyanobacteriota&quot;, phylum == &quot;Proteobacteria&quot; ~ &quot;Pseudomonadota&quot;, TRUE ~ phylum)) 2.6 Genome tree genome_tree &lt;- read_tree(&quot;resources/metagenomics/coassembly_species_gtdbtk_full.tree&quot;) genome_tree$tip.label &lt;- gsub(&quot;.fa&quot;,&quot;&quot;,genome_tree$tip.label) #remove .fa extension genome_tree &lt;- keep.tip(genome_tree, tip=genome_metadata$genome) # keep only MAG tips 2.7 Preprocessing info unmapped &lt;- read_tsv(&quot;resources/metagenomics/all_species_mapping_rate.txt&quot;) mapping &lt;- unmapped[c(1),] %&gt;% t() %&gt;% row_to_names(row_number = 1) %&gt;% as.data.frame() %&gt;% mutate_if(is.character, as.numeric) %&gt;% rownames_to_column(&quot;sample&quot;) %&gt;% mutate(mapped=100-unmapped) preprocess_info &lt;- read_tsv(&quot;resources/metagenomics/preprocessing_report.tsv&quot;) %&gt;% arrange(match(sample,sample_metadata$sample)) %&gt;% mutate(host_percent=100*(host_reads)/(reads_post_filt)) %&gt;% left_join(., mapping, by=join_by(sample==sample)) preprocess_info &lt;- preprocess_info[match(sample_metadata$sample, preprocess_info$sample), ] 2.8 Genome annotations genome_annotations &lt;- read_tsv(&quot;resources/metagenomics/all_annotations.tsv.xz&quot;) 2.9 Genome functions distillation genome_gifts &lt;- distill(genome_annotations,GIFT_db,genomecol=2,annotcol=c(9,10,19), verbosity=F) genome_gifts &lt;- genome_gifts[rownames(genome_gifts) %in% genome_counts_filt$genome,] genome_counts_filt$genome %in% rownames(genome_gifts) rownames(genome_gifts) %in% genome_counts_filt$genome 2.10 Phyloseq object #phyloseq object without structural zeros phylo_samples &lt;- sample_metadata %&gt;% column_to_rownames(&quot;sample&quot;) %&gt;% sample_data() #convert to phyloseq sample_data object phylo_counts &lt;- genome_counts_filt %&gt;% column_to_rownames(&quot;genome&quot;) %&gt;% otu_table(., taxa_are_rows = TRUE) #convert to phyloseq otu_table object phylo_taxonomy &lt;- genome_metadata %&gt;% dplyr::select(domain,phylum,class,order,family,genus,species,genome,length) %&gt;% column_to_rownames(&quot;genome&quot;) %&gt;% as.matrix() %&gt;% tax_table() tree &lt;- phy_tree(genome_tree) genome_data &lt;- phyloseq(phylo_counts, phylo_taxonomy, phylo_samples, tree) 2.11 Prepare color scheme phylum_colors &lt;- read_tsv(&quot;https://raw.githubusercontent.com/earthhologenome/EHI_taxonomy_colour/main/ehi_phylum_colors.tsv&quot;) %&gt;% mutate_at(vars(phylum), ~ str_replace(., &quot;[dpcofgs]__&quot;, &quot;&quot;))%&gt;% right_join(genome_metadata, by=join_by(phylum == phylum)) %&gt;% arrange(match(genome, genome_tree$tip.label)) %&gt;% select(phylum, colors) %&gt;% unique() %&gt;% arrange(phylum) %&gt;% pull(colors, name=phylum) save(sample_metadata, genome_metadata, read_counts, genome_counts, genome_counts_filt, preprocess_info, genome_tree, genome_gifts, genome_data, phylum_colors, file = &quot;resources/metagenomics/data.Rdata&quot;) "],["amplicon.html", "Chapter 3 Amplicon 3.1 Load data", " Chapter 3 Amplicon 3.1 Load data read_counts &lt;- read_tsv(&quot;resources/amplicon/ASVs_count_overlap10_nochim0.tsv&quot;) %&gt;% dplyr::rename(asv = 1) %&gt;% as.data.frame() #asvs &lt;- read_counts$asv taxonomy_sp &lt;- read_tsv(&quot;resources/amplicon/taxonomy_species_tax_overlap10_nochim0.tsv&quot;) %&gt;% dplyr::rename(asv = 1) %&gt;% as.data.frame() hierarchy &lt;- read_csv(&quot;resources/amplicon/metadata.csv&quot;) samples &lt;- read_counts %&gt;% select(-asv) %&gt;% colnames() hierarchy &lt;- hierarchy[hierarchy$Sample %in% samples,] metadata &lt;- tibble::column_to_rownames(hierarchy, &quot;Sample&quot;) read_counts_row &lt;- column_to_rownames(read_counts, &quot;asv&quot;) taxonomy_table_row &lt;- column_to_rownames(taxonomy_sp, &quot;asv&quot;) "],["create-a-phyloseq-object.html", "Chapter 4 Create a phyloseq object", " Chapter 4 Create a phyloseq object #Phyloseq object count_phy &lt;- otu_table(read_counts_row, taxa_are_rows=T) sample_info_tab_phy &lt;- sample_data(metadata) asv_tax.m &lt;- as.matrix(taxonomy_table_row) TAX = tax_table(asv_tax.m) physeq.raw = phyloseq(count_phy, TAX, sample_info_tab_phy) physeq.raw &lt;- prune_taxa(taxa_sums(physeq.raw)&gt;0, physeq.raw) physeq.raw &lt;- prune_samples(sample_sums(physeq.raw) &gt; 0, physeq.raw) physeq_sample &lt;- subset_samples(physeq.raw, Control == &quot;True sample&quot;) physeq_sample &lt;- prune_taxa(taxa_sums(physeq_sample)&gt;0, physeq_sample) "],["remove-contaminants.html", "Chapter 5 Remove contaminants 5.1 Basic filtering 5.2 Removing chloroplast and mitochondria 5.3 Save", " Chapter 5 Remove contaminants sample_data(physeq.raw)$is.neg &lt;- sample_data(physeq.raw)$Control == &quot;Control sample&quot; contamdf.prev &lt;- isContaminant(physeq.raw, method=&quot;prevalence&quot;, neg=&quot;is.neg&quot;) table(contamdf.prev$contaminant) contam_asvs &lt;- row.names(contamdf.prev[contamdf.prev$contaminant == TRUE, ]) contaminants &lt;- asv_tax.m[row.names(asv_tax.m) %in% contam_asvs, ] # making new phyloseq object without ASV contaminats physeq &lt;- subset_samples(physeq.raw, Control == &quot;True sample&quot;) physeq &lt;- prune_taxa(taxa_sums(physeq)&gt;0, physeq) goodTaxa &lt;- setdiff(taxa_names(physeq), contam_asvs) physeq.final &lt;- prune_taxa(goodTaxa, physeq) 5.1 Basic filtering read_counts_final &lt;- data.frame(physeq.final@otu_table) count_filtdepth &lt;- read_counts_final[,colSums(read_counts_final)&gt;1000] count_phy_filt &lt;- otu_table(count_filtdepth, taxa_are_rows=T) otu_table(physeq.final) &lt;- count_phy_filt #TAXONOMY filtering physeq_bacteria &lt;- subset_taxa(physeq.final, Kingdom == &quot;Bacteria&quot;) physeq_others &lt;- subset_taxa(physeq.final, Kingdom != &quot;Bacteria&quot;) physeq_archaea &lt;- subset_taxa(physeq.final, Kingdom == &quot;Archaea&quot;) physeq_phylum &lt;- subset_taxa(physeq_bacteria, !is.na(Phylum)) physeq_phylumNA &lt;- subset_taxa(physeq_bacteria, is.na(Phylum)) physeq_class &lt;- subset_taxa(physeq_phylum, !is.na(Class)) physeq_classNA &lt;- subset_taxa(physeq_phylum, is.na(Class)) 5.2 Removing chloroplast and mitochondria taxonomy &lt;- physeq.final@tax_table is.mitochondria &lt;- physeq.final@tax_table[,&quot;Family&quot;] %in% &quot;Mitochondria&quot; taxonomy &lt;- taxonomy[!is.mitochondria,] is.chloroplast &lt;- taxonomy[,&quot;Order&quot;] %in% &quot;Chloroplast&quot; taxonomy &lt;- taxonomy[!is.chloroplast,] taxonomy.m &lt;- as.matrix(taxonomy) tax_table(physeq.final) &lt;- taxonomy.m physeq.final.filt &lt;- prune_taxa(taxa_sums(physeq.final)&gt;0, physeq.final) 5.3 Save saveRDS(physeq.final.filt,&quot;resources/amplicon/physeq_final_nocopyfilter.RData&quot;) "],["merging-amplicon-and-shotgun-data.html", "Chapter 6 Merging amplicon and shotgun data 6.1 Prepare the metagenomic data 6.2 Prepare the 16S data 6.3 Create master table for amplicon data", " Chapter 6 Merging amplicon and shotgun data physeq_16S &lt;- readRDS(&quot;resources/amplicon/physeq_final_nocopyfilter.RData&quot;) physeq_16S &lt;- prune_taxa(taxa_sums(physeq_16S)&gt;0, physeq_16S) #list duplicated data remov_samples &lt;- c(&quot;P19_r1&quot;, &quot;P19_r2&quot;, &quot;P10_r2&quot;, &quot;P10_r1&quot;, &quot;E06_r3&quot;, &quot;E06_r2&quot;, &quot;E15_r1&quot;, &quot;E29_r1&quot;, &quot;E29_r2&quot;, &quot;E37_r2&quot;, &quot;E37_r3&quot;, &quot;E47_r2&quot;, &quot;E50_r1&quot;, &quot;H09_r1&quot;, &quot;H13_r2&quot;, &quot;H39_r1&quot;, &quot;P35_r3&quot;, &quot;P64_r2&quot;, &quot;P64_r3&quot;) #Change the names in asv_table asv_16S &lt;- data.frame(physeq_16S@otu_table) names(asv_16S) &lt;- sub(&quot;^[^.]+\\\\.&quot;, &quot;&quot;,names(asv_16S)) colnames(asv_16S) #filter duplicated data asv_16S_filt &lt;- asv_16S[, -which(names(asv_16S) %in% remov_samples)] #remove _r* from the names names(asv_16S_filt) &lt;- gsub(pattern = &quot;_r[1-3]$&quot;, &quot;&quot;, x = names(asv_16S_filt)) asv_16S_filt &lt;- asv_16S_filt[rowSums(asv_16S_filt[, -1] &gt; 0) != 0, ] %&gt;% rownames_to_column(., &quot;asv&quot;) #Prepare the samples data and filter sample_metadata_16S &lt;- data.frame(physeq_16S@sam_data) %&gt;% rownames_to_column(., &quot;sample_id&quot;) %&gt;% separate_wider_delim(sample_id, &quot;.&quot;, names = c(&#39;id&#39;, &#39;sample&#39;)) %&gt;% select(-id) %&gt;% separate_wider_delim(Sp_Biome, &quot;_&quot;, names = c(&#39;Sp&#39;, &#39;Biome&#39;)) %&gt;% column_to_rownames(., &quot;sample&quot;) # Define the row indices to keep based on row names rows_to_remove &lt;- !(rownames(sample_metadata_16S) %in% remov_samples) # Filter the data frame based on the row indices sample_metadata_16S &lt;- sample_metadata_16S[rows_to_remove, ] #remove _r* rownames(sample_metadata_16S) &lt;- gsub(pattern = &quot;_r[1-3]$&quot;, &quot;&quot;, x = rownames(sample_metadata_16S)) sample_metadata_16S &lt;- sample_metadata_16S %&gt;% rownames_to_column(., &quot;sample&quot;) genome_metadata_16S &lt;- data.frame(physeq_16S@tax_table) %&gt;% rownames_to_column(., &quot;asv&quot;) %&gt;% filter(asv %in% asv_16S_filt$asv) save(sample_metadata_16S, asv_16S_filt, genome_metadata_16S, file = &quot;resources/amplicon/data_withoutcopy.Rdata&quot;) #keep samples present in metagenomic study sample_metadata_16S_filt &lt;- sample_metadata_16S[sample_metadata_16S$sample %in% sample_metadata$sample,] #keep samples present in 16S study sample_metagenomic_filt &lt;- sample_metadata[sample_metadata$sample %in% sample_metadata_16S$sample,] 6.1 Prepare the metagenomic data phyloM_samples &lt;- sample_metagenomic_filt %&gt;% column_to_rownames(., &quot;sample&quot;) %&gt;% sample_data() #convert to phyloseq sample_data object sam_data(genome_data) &lt;- phyloM_samples phyloseq_metagenome_filtered &lt;- prune_taxa(taxa_sums(genome_data)&gt;0, genome_data) sample_metadata &lt;- data.frame(phyloseq_metagenome_filtered@sam_data)%&gt;% rownames_to_column(., &quot;sample&quot;) genome_metadata &lt;- data.frame(phyloseq_metagenome_filtered@tax_table) %&gt;% rownames_to_column(., &quot;genome&quot;) genome_counts_filt &lt;- data.frame(phyloseq_metagenome_filtered@otu_table) %&gt;% rownames_to_column(., &quot;genome&quot;) preprocess_info &lt;- preprocess_info %&gt;% filter(sample %in% sample_metadata$sample) genome_tree &lt;- keep.tip(genome_tree, tip=genome_metadata$genome) genome_gifts &lt;- genome_gifts[rownames(genome_gifts) %in% genome_counts_filt$genome,] save(sample_metadata, genome_metadata, read_counts, genome_counts, genome_counts_filt, preprocess_info, genome_tree, genome_gifts, phyloseq_metagenome_filtered, phylum_colors, file = &quot;resources/metagenomics/data_filtered.Rdata&quot;) 6.2 Prepare the 16S data phylo_samples &lt;- sample_metadata_16S_filt %&gt;% remove_rownames() %&gt;% column_to_rownames(., &quot;sample&quot;) %&gt;% sample_data() phylo_counts &lt;- asv_16S_filt %&gt;% column_to_rownames(., &quot;asv&quot;) %&gt;% otu_table(., taxa_are_rows = TRUE) phylo_taxonomy &lt;- genome_metadata_16S %&gt;% column_to_rownames(., &quot;asv&quot;)%&gt;% as.matrix() %&gt;% tax_table() physeq_16S_filt &lt;- phyloseq(phylo_counts, phylo_samples, phylo_taxonomy) phyloseq_16S_filtered &lt;- prune_taxa(taxa_sums(physeq_16S_filt)&gt;0, physeq_16S_filt) sample_metadata &lt;- data.frame(phyloseq_16S_filtered@sam_data)%&gt;% rownames_to_column(., &quot;sample&quot;) %&gt;% rename(species_name=Species) %&gt;% rename(Species=Sp) %&gt;% mutate(Habitat = ifelse(Habitat == &quot;Natural&quot;, &quot;Nat&quot;, Habitat)) %&gt;% mutate(Habitat = ifelse(Habitat == &quot;Anthropogenic&quot;, &quot;Anth&quot;, Habitat)) genome_metadata &lt;- data.frame(phyloseq_16S_filtered@tax_table) %&gt;% rownames_to_column(., &quot;genome&quot;) %&gt;% mutate(Phylum = case_when( Phylum == &quot;Actinobacteriota&quot; ~ &quot;Actinomycetota&quot;, Phylum == &quot;Firmicutes&quot; ~ &quot;Bacillota&quot;, Phylum == &quot;Firmicutes_A&quot; ~ &quot;Bacillota_A&quot;, Phylum == &quot;Firmicutes_C&quot; ~ &quot;Bacillota_C&quot;, Phylum == &quot;Cyanobacteria&quot; ~ &quot;Cyanobacteriota&quot;, Phylum == &quot;Proteobacteria&quot; ~ &quot;Pseudomonadota&quot;, TRUE ~ Phylum)) colnames(genome_metadata)&lt;- c(&quot;genome&quot;, &quot;domain&quot;, &quot;phylum&quot;, &quot;class&quot;, &quot;order&quot;, &quot;family&quot;, &quot;genus&quot;, &quot;species&quot;) genome_counts_filt &lt;- data.frame(phyloseq_16S_filtered@otu_table) %&gt;% rownames_to_column(., &quot;genome&quot;) ## Prepare color scheme phylum_colors &lt;- read_tsv(&quot;https://raw.githubusercontent.com/earthhologenome/EHI_taxonomy_colour/main/ehi_phylum_colors.tsv&quot;) %&gt;% mutate_at(vars(phylum), ~ str_replace(., &quot;[dpcofgs]__&quot;, &quot;&quot;))%&gt;% right_join(genome_metadata, by=join_by(phylum == phylum)) %&gt;% arrange(match(genome, genome_metadata$genome)) %&gt;% select(phylum, colors) %&gt;% unique() %&gt;% arrange(phylum) %&gt;% pull(colors, name=phylum) taxonomy &lt;- genome_metadata %&gt;% column_to_rownames(&quot;genome&quot;) %&gt;% as.matrix() %&gt;% tax_table() sample_data &lt;- sample_metadata %&gt;% column_to_rownames(&quot;sample&quot;) %&gt;% sample_data() tax_table(phyloseq_16S_filtered) &lt;- taxonomy sample_data(phyloseq_16S_filtered) &lt;- sample_data save(sample_metadata, genome_metadata, genome_counts_filt, phyloseq_16S_filtered, phylum_colors, file = &quot;resources/amplicon/data_nocopyfilt.Rdata&quot;) 6.3 Create master table for amplicon data load(&quot;resources/amplicon/data_nocopyfilt.Rdata&quot;) threshold_table &lt;- genome_counts_filt %&gt;% mutate_at(vars(-genome), ~ ./sum(.)) %&gt;% pivot_longer(!genome, names_to = &quot;sample&quot;,values_to = &quot;t0&quot;) %&gt;% left_join(sample_metadata %&gt;% select(sample,Species), by=&quot;sample&quot;) %&gt;% mutate(t1 = if_else(t0 &lt; 0.0001, 0, t0), t2 = if_else(t0 &lt; 0.001, 0, t0), t3 = if_else(t0 &lt; 0.01, 0, t0), t4 = if_else(t0 &lt; 0.1, 0, t0)) %&gt;% pivot_longer(!c(genome,sample,Species), names_to = &quot;copy_threshold&quot;,values_to = &quot;value&quot;) prevalence_table &lt;- threshold_table %&gt;% group_by(Species,genome,copy_threshold) %&gt;% summarise(present = sum(value != 0, na.rm = TRUE), total = n()) %&gt;% mutate(prevalence=present/total) %&gt;% select(-present,-total) master_table &lt;- inner_join(threshold_table,prevalence_table,by=join_by(&quot;Species&quot;==&quot;Species&quot;,&quot;genome&quot;==&quot;genome&quot;,&quot;copy_threshold&quot;==&quot;copy_threshold&quot;)) %&gt;% rename(p0=value) %&gt;% mutate(p10 = if_else(prevalence &lt; 0.1, 0, p0), p20 = if_else(prevalence &lt; 0.2, 0, p0), p30 = if_else(prevalence &lt; 0.3, 0, p0), p40 = if_else(prevalence &lt; 0.4, 0, p0)) %&gt;% select(-prevalence) %&gt;% pivot_longer(!c(genome,sample,Species,copy_threshold), names_to = &quot;prevalence&quot;,values_to = &quot;value&quot;) %&gt;% mutate(pa = if_else(value &gt; 0, 1, 0)) save(master_table, file = &quot;resources/amplicon/master_table.Rdata&quot;) "],["community-composition.html", "Chapter 7 Community composition 7.1 Metagenomics 7.2 Summary table 7.3 Amplicon 7.4 Summary table", " Chapter 7 Community composition 7.1 Metagenomics load(&quot;resources/metagenomics/data_filtered.Rdata&quot;) 7.1.1 Taxonomy overview Number of Archaea phyla genome_metadata %&gt;% filter(domain == &quot;Archaea&quot;)%&gt;% dplyr::select(phylum) %&gt;% unique() %&gt;% pull() %&gt;% length()%&gt;% cat() 0 Number of Bacteria phyla genome_metadata %&gt;% filter(domain == &quot;Bacteria&quot;)%&gt;% dplyr::select(phylum) %&gt;% unique() %&gt;% pull() %&gt;% length()%&gt;% cat() 15 7.1.1.1 Phylum level genome_counts_filt %&gt;% mutate_at(vars(-genome),~./sum(.)) %&gt;% #apply TSS nornalisation pivot_longer(-genome, names_to = &quot;sample&quot;, values_to = &quot;count&quot;) %&gt;% #reduce to minimum number of columns left_join(., genome_metadata, by = join_by(genome == genome)) %&gt;% #append genome metadata left_join(., sample_metadata, by = join_by(sample == sample)) %&gt;% #append sample metadata filter(count &gt; 0) %&gt;% #filter 0 counts ggplot(., aes(x=sample,y=count, fill=phylum, group=phylum)) + #grouping enables keeping the same sorting of taxonomic units geom_bar(stat=&quot;identity&quot;, colour=&quot;white&quot;, linewidth=0.1) + #plot stacked bars with white borders scale_fill_manual(values=phylum_colors) + facet_nested(~factor(Species, labels=c(&quot;Eb&quot; = &quot;Eptesicus&quot;, &quot;Ha&quot; = &quot;Hypsugo&quot;, &quot;Pk&quot; = &quot;Pipistrellus&quot;)), scales=&quot;free&quot;) + #facet per day and treatment guides(fill = guide_legend(ncol = 1)) + theme(axis.text.x = element_blank(), axis.ticks.x = element_blank(), axis.title.x = element_blank(), panel.background = element_blank(), panel.border = element_blank(), panel.grid.major = element_blank(), panel.grid.minor = element_blank(), strip.background = element_rect(fill = &quot;white&quot;), strip.text = element_text(size = 12, lineheight = 0.6,face=&quot;bold&quot;), axis.line = element_line(linewidth = 0.5, linetype = &quot;solid&quot;, colour = &quot;black&quot;)) + labs(fill=&quot;Phylum&quot;,y = &quot;Relative abundance&quot;,x=&quot;Samples&quot;) Phylum relative abundances phylum_summary &lt;- genome_counts_filt %&gt;% mutate_at(vars(-genome),~./sum(.)) %&gt;% pivot_longer(-genome, names_to = &quot;sample&quot;, values_to = &quot;count&quot;) %&gt;% left_join(sample_metadata, by = join_by(sample == sample)) %&gt;% left_join(genome_metadata, by = join_by(genome == genome)) %&gt;% group_by(sample,phylum,Species, Region) %&gt;% summarise(relabun=sum(count)) phylum_summary %&gt;% group_by(phylum) %&gt;% summarise(Total_mean=mean(relabun*100, na.rm=T), Total_sd=sd(relabun*100, na.rm=T), Eb_mean=mean(relabun[Species==&quot;Eb&quot;]*100, na.rm=T), Eb_sd=sd(relabun[Species==&quot;Eb&quot;]*100, na.rm=T), Ha_mean=mean(relabun[Species==&quot;Ha&quot;]*100, na.rm=T), Ha_sd=sd(relabun[Species==&quot;Ha&quot;]*100, na.rm=T), Pk_mean=mean(relabun[Species==&quot;Pk&quot;]*100, na.rm=T), Pk_sd=sd(relabun[Species==&quot;Pk&quot;]*100, na.rm=T)) %&gt;% mutate(Total_meta=str_c(round(Total_mean,3),&quot;±&quot;,round(Total_sd,3)), Eptesicus_meta=str_c(round(Eb_mean,3),&quot;±&quot;,round(Eb_sd,3)), Hypsugo_meta=str_c(round(Ha_mean,3),&quot;±&quot;,round(Ha_sd,3)), Pipistrellus_meta=str_c(round(Pk_mean,3),&quot;±&quot;,round(Pk_sd,3))) %&gt;% arrange(-Eb_mean)%&gt;% dplyr::select(phylum,Total_meta,Eptesicus_meta,Hypsugo_meta,Pipistrellus_meta) # A tibble: 15 × 5 phylum Total_meta Eptesicus_meta Hypsugo_meta Pipistrellus_meta &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; 1 Pseudomonadota 68.255±37.904 63.683±35.64 89.049±29.599 52.374±38.209 2 Bacillota 16.181±29.125 15.147±28.225 5.375±19.493 25.984±33.849 3 Desulfobacterota 3.981±10.582 7.227±13.106 0±0 5.944±13.024 4 Bacteroidota 6.774±17.384 5.695±9.903 5.263±22.942 8.569±14.844 5 Bacillota_A 1.545±4.266 2.215±4.627 0±0 2.576±5.538 6 Fusobacteriota 0.694±1.785 1.818±3.061 0±0 0.781±1.589 7 Campylobacterota 1.288±6.836 1.731±2.428 0±0 2.198±10.309 8 Elusimicrobiota 0.141±0.755 0.72±1.643 0±0 0±0 9 Synergistota 0.405±1.282 0.562±1.116 0±0 0.684±1.771 10 Planctomycetota 0.086±0.454 0.44±0.985 0±0 0±0 11 Deferribacterota 0.08±0.4 0.407±0.861 0±0 0±0 12 Bacillota_C 0.136±0.36 0.354±0.531 0±0 0.154±0.385 13 Actinomycetota 0.075±0.534 0±0 0.201±0.876 0±0 14 Cyanobacteriota 0.318±1.537 0±0 0±0 0.737±2.302 15 Spirochaetota 0.041±0.296 0±0 0.111±0.486 0±0 7.1.1.2 Family level Percentange of families in each group family_summary &lt;- genome_counts_filt %&gt;% mutate_at(vars(-genome),~./sum(.)) %&gt;% #apply TSS nornalisation pivot_longer(-genome, names_to = &quot;sample&quot;, values_to = &quot;count&quot;) %&gt;% #reduce to minimum number of columns left_join(sample_metadata, by = join_by(sample == sample)) %&gt;% #append sample metadata left_join(., genome_metadata, by = join_by(genome == genome)) %&gt;% #append genome metadata group_by(sample,family, Species) %&gt;% summarise(relabun=sum(count)) family_summary %&gt;% group_by(family) %&gt;% summarise(Eb_mean=mean(relabun[Species==&quot;Eb&quot;]*100, na.rm=T), Eb_sd=sd(relabun[Species==&quot;Eb&quot;]*100, na.rm=T), Ha_mean=mean(relabun[Species==&quot;Ha&quot;]*100, na.rm=T), Ha_sd=sd(relabun[Species==&quot;Ha&quot;]*100, na.rm=T), Pk_mean=mean(relabun[Species==&quot;Pk&quot;]*100, na.rm=T), Pk_sd=sd(relabun[Species==&quot;Pk&quot;]*100, na.rm=T)) %&gt;% mutate(Eptesicus=str_c(round(Eb_mean,3),&quot;±&quot;,round(Eb_sd,3)), Hypsugo=str_c(round(Ha_mean,3),&quot;±&quot;,round(Ha_sd,3)), Pipistrellus=str_c(round(Pk_mean,3),&quot;±&quot;,round(Pk_sd,3))) %&gt;% arrange(-Eb_mean, -Ha_mean) %&gt;% dplyr::select(family,Eptesicus,Hypsugo,Pipistrellus) # A tibble: 55 × 4 family Eptesicus Hypsugo Pipistrellus &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; 1 Diplorickettsiaceae 33.448±40.33 24.089±41.769 10.097±24.365 2 Enterobacteriaceae 17.987±30.59 10.107±20.975 18.469±28.031 3 Mycoplasmataceae 8.829±18.638 4.422±19.277 0±0 4 Vibrionaceae 7.534±23.723 5.863±11.437 5.576±18.175 5 Desulfovibrionaceae 6.023±11.116 0±0 4.561±9.963 6 Enterococcaceae 4.692±10.65 0.602±2.624 3.243±11.687 7 Dysgonomonadaceae 2.721±6.637 0±0 3.84±7.171 8 Aeromonadaceae 1.626±4.965 5.844±13.778 0±0 9 Leptotrichiaceae 1.611±3.041 0±0 0.733±1.597 10 Helicobacteraceae 1.544±2.452 0±0 2.198±10.309 # ℹ 45 more rows family_arrange &lt;- family_summary %&gt;% group_by(family) %&gt;% summarise(mean=sum(relabun)) %&gt;% arrange(-mean) %&gt;% select(family) %&gt;% pull() # Per environment family_summary %&gt;% left_join(genome_metadata %&gt;% select(family,phylum) %&gt;% unique(),by=join_by(family==family)) %&gt;% filter(family %in% family_arrange[1:20]) %&gt;% mutate(family=factor(family,levels=rev(family_arrange[1:20]))) %&gt;% filter(relabun &gt; 0) %&gt;% ggplot(aes(x=relabun, y=family, group=family, color=phylum)) + scale_color_manual(values=phylum_colors[-8]) + geom_jitter(alpha=0.5) + facet_grid(.~Species)+ theme_minimal() + labs(y=&quot;Family&quot;, x=&quot;Relative abundance&quot;, color=&quot;Phylum&quot;) 7.1.1.3 Genus level Percetange of genera in each group genus_summary &lt;- genome_counts_filt %&gt;% mutate_at(vars(-genome),~./sum(.)) %&gt;% pivot_longer(-genome, names_to = &quot;sample&quot;, values_to = &quot;count&quot;) %&gt;% left_join(sample_metadata, by = join_by(sample == sample)) %&gt;% left_join(genome_metadata, by = join_by(genome == genome)) %&gt;% group_by(sample,phylum,genus, Species) %&gt;% summarise(relabun=sum(count)) genus_summary %&gt;% group_by(genus) %&gt;% summarise(Eb_mean=mean(relabun[Species==&quot;Eb&quot;]*100, na.rm=T), Eb_sd=sd(relabun[Species==&quot;Eb&quot;]*100, na.rm=T), Ha_mean=mean(relabun[Species==&quot;Ha&quot;]*100, na.rm=T), Ha_sd=sd(relabun[Species==&quot;Ha&quot;]*100, na.rm=T), Pk_mean=mean(relabun[Species==&quot;Pk&quot;]*100, na.rm=T), Pk_sd=sd(relabun[Species==&quot;Pk&quot;]*100, na.rm=T)) %&gt;% mutate(Eptesicus=str_c(round(Eb_mean,3),&quot;±&quot;,round(Eb_sd,3)), Hypsugo=str_c(round(Ha_mean,3),&quot;±&quot;,round(Ha_sd,3)), Pipistrellus=str_c(round(Pk_mean,3),&quot;±&quot;,round(Pk_sd,3))) %&gt;% arrange(-Eb_mean, -Ha_mean) %&gt;% dplyr::select(genus,Eptesicus,Hypsugo,Pipistrellus) # A tibble: 72 × 4 genus Eptesicus Hypsugo Pipistrellus &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; 1 Aquirickettsiella 33.448±40.33 24.089±41.769 10.097±24.365 2 Spiroplasma 8.747±18.476 0±0 0±0 3 Vibrio 7.534±23.723 5.863±11.437 5.576±18.175 4 Jejubacter 4.268±9 0±0 0±0 5 Escherichia 3.416±10.802 0±0 0.317±1.488 6 Pseudocitrobacter 3.293±9.507 0±0 0.006±0.028 7 Frigididesulfovibrio 2.803±4.353 0±0 1.129±2.876 8 Enterococcus 2.769±5.838 0.602±2.624 3.243±11.687 9 Dysgonomonas 2.721±6.637 0±0 3.84±7.171 10 Serratia 2.389±7.462 6.416±19.813 2.331±10.5 # ℹ 62 more rows genus_summary_sort &lt;- genus_summary %&gt;% group_by(genus) %&gt;% summarise(mean=mean(relabun, na.rm=T),sd=sd(relabun, na.rm=T)) %&gt;% arrange(-mean) genus_summary %&gt;% mutate(genus=factor(genus, levels=rev(genus_summary_sort %&gt;% pull(genus)))) %&gt;% filter(relabun &gt; 0) %&gt;% ggplot(aes(x=relabun, y=genus, group=genus, color=phylum)) + scale_color_manual(values=phylum_colors) + geom_jitter(alpha=0.5) + facet_grid(.~Species)+ theme_minimal() + theme(axis.text.y = element_text(size=6))+ labs(y=&quot;Genera&quot;, x=&quot;Relative abundance&quot;, color=&quot;Phylum&quot;) Number of mags and distinct taxonomy bats=c(&quot;Eb&quot;, &quot;Pk&quot;, &quot;Ha&quot;) total_mags &lt;- data.frame( Bat = character(), MAGs = numeric(), Phylum = numeric(), Family = numeric(), Genus = numeric() ) preabs_table &lt;- genome_counts_filt %&gt;% mutate(across(-genome, ~ . / sum(.))) %&gt;% column_to_rownames(&quot;genome&quot;) %&gt;% mutate(across(everything(), ~ as.integer(. &gt; 0))) %&gt;% t() %&gt;% as.data.frame() %&gt;% rownames_to_column(&quot;sample&quot;) %&gt;% left_join(sample_metadata[c(&quot;sample&quot;, &quot;Species&quot;)], by = &quot;sample&quot;) %&gt;% group_by(Species) %&gt;% summarize(across(-sample, sum), .groups = &quot;drop&quot;) %&gt;% column_to_rownames(&quot;Species&quot;) %&gt;% t() %&gt;% as.data.frame() %&gt;% rownames_to_column(&quot;genome&quot;) %&gt;% left_join(genome_metadata, by=join_by(&quot;genome&quot;==&quot;genome&quot;)) phylum &lt;- preabs_table %&gt;% distinct(phylum) family &lt;- preabs_table %&gt;% distinct(phylum, class, order, family) genus &lt;- preabs_table %&gt;% distinct(phylum, class, order, family, genus) total_mags &lt;- rbind( total_mags, data.frame( Bat = &quot;Total&quot;, MAGs = nrow(preabs_table), Phylum = nrow(phylum), Family = nrow(family), Genus = nrow(genus) ) ) for (bat in bats) { number &lt;- preabs_table %&gt;% select({{bat}}) %&gt;% filter(.&gt;=1) phylum &lt;- preabs_table %&gt;% select({{bat}}, phylum) %&gt;% filter(!!sym(bat)&gt;=1) %&gt;% distinct(phylum) family &lt;- preabs_table %&gt;% select({{bat}}, phylum, class, order, family) %&gt;% filter(!!sym(bat)&gt;=1) %&gt;% distinct(phylum, class, order, family) genus &lt;- preabs_table %&gt;% select({{bat}}, phylum, class, order, family, genus) %&gt;% filter(!!sym(bat)&gt;=1) %&gt;% distinct(phylum, class, order, family, genus) total_mags &lt;- rbind( total_mags, data.frame( Bat = bat, MAGs = nrow(number), Phylum = nrow(phylum), Family = nrow(family), Genus = nrow(genus) ) ) } bats=c(&quot;Eb&quot;, &quot;Pk&quot;, &quot;Ha&quot;) no_annotation &lt;- data.frame( Bat = character(), No_genus = numeric(), No_species = numeric() ) preabs_table &lt;- genome_counts_filt %&gt;% mutate(across(-genome, ~ . / sum(.))) %&gt;% column_to_rownames(&quot;genome&quot;) %&gt;% mutate(across(everything(), ~ as.integer(. &gt; 0))) %&gt;% t() %&gt;% as.data.frame() %&gt;% rownames_to_column(&quot;sample&quot;) %&gt;% left_join(sample_metadata[c(&quot;sample&quot;, &quot;Species&quot;)], by = &quot;sample&quot;) %&gt;% group_by(Species) %&gt;% summarize(across(-sample, sum), .groups = &quot;drop&quot;) %&gt;% column_to_rownames(&quot;Species&quot;) %&gt;% t() %&gt;% as.data.frame() %&gt;% rownames_to_column(&quot;genome&quot;) %&gt;% left_join(genome_metadata, by=join_by(&quot;genome&quot;==&quot;genome&quot;)) genus &lt;- preabs_table %&gt;% filter(genus == &quot;&quot;) species &lt;- preabs_table %&gt;% filter(species == &quot;&quot;) no_annotation &lt;- rbind( no_annotation, data.frame( Bat = &quot;Total&quot;, No_genus = nrow(genus), No_species = nrow(species) ) ) for (bat in bats) { number &lt;- preabs_table %&gt;% select({{bat}}) %&gt;% filter(.&gt;=1) genus &lt;- preabs_table %&gt;% select({{bat}}, phylum, class, order, family, genus) %&gt;% filter(!!sym(bat)&gt;=1) %&gt;% filter(genus == &quot;&quot;) species &lt;- preabs_table %&gt;% filter(!!sym(bat)&gt;=1) %&gt;% filter(species == &quot;&quot;) no_annotation &lt;- rbind( no_annotation, data.frame( Bat = bat, No_genus = nrow(genus), No_species = nrow(species) ) ) } Total percentage of MAGs without genus-level annotation nongenera &lt;- genome_metadata %&gt;% filter(genus == &quot;&quot;) %&gt;% summarize(Mag_nogenera = n()) %&gt;% pull() nmags &lt;- total_mags %&gt;% filter(Bat==&quot;Total&quot;) %&gt;% select(MAGs) %&gt;% pull() perct &lt;- nongenera*100/nmags cat(perct) 20.74074 Percentage of MAGs without genus-level annotation by phylum total_mag_phylum &lt;- genome_metadata %&gt;% group_by(phylum) %&gt;% summarize(Total_MAGs = n()) genome_metadata %&gt;% filter(genus == &quot;&quot;) %&gt;% group_by(phylum) %&gt;% summarize(MAGs_nogenus = n()) %&gt;% left_join(total_mag_phylum, by = join_by(phylum == phylum)) %&gt;% mutate(Percentage_nogenus=100*MAGs_nogenus/Total_MAGs) %&gt;% tt() .table td.tinytable_css_id3yds41u4fsmd7wkv8osp, .table th.tinytable_css_id3yds41u4fsmd7wkv8osp { border-bottom: solid 0.1em #d3d8dc; } phylum MAGs_nogenus Total_MAGs Percentage_nogenus Bacillota 2 14 14.285714 Bacillota_A 8 19 42.105263 Bacillota_C 1 1 100.000000 Bacteroidota 1 19 5.263158 Campylobacterota 1 3 33.333333 Deferribacterota 2 2 100.000000 Pseudomonadota 12 51 23.529412 Synergistota 1 1 100.000000 Number of bacterial species genome_metadata %&gt;% filter(domain == &quot;Bacteria&quot;)%&gt;% dplyr::select(species) %&gt;% unique() %&gt;% pull() %&gt;% length() %&gt;% cat() 37 Total percentage of MAGs without species-level annotation nonspecies &lt;- genome_metadata %&gt;% filter(species == &quot;&quot;) %&gt;% summarize(Mag_nospecies = n()) %&gt;% pull() perct &lt;- nonspecies*100/nmags cat(perct) 72.59259 MAGs without species-level annotation total_mag_phylum &lt;- genome_metadata %&gt;% group_by(phylum) %&gt;% summarize(MAGs_total = n()) genome_metadata %&gt;% filter(species == &quot;&quot;) %&gt;% group_by(phylum) %&gt;% summarize(MAGs_nospecies = n()) %&gt;% left_join(total_mag_phylum, by = join_by(phylum == phylum)) %&gt;% mutate(species_annotated=MAGs_total-MAGs_nospecies) %&gt;% mutate(Percentage_nospecies=100*MAGs_nospecies/MAGs_total) %&gt;% mutate(Percentage_species=100-100*MAGs_nospecies/MAGs_total)%&gt;% tt() .table td.tinytable_css_idu00p0s0k8byfeunea46p, .table th.tinytable_css_idu00p0s0k8byfeunea46p { border-bottom: solid 0.1em #d3d8dc; } phylum MAGs_nospecies MAGs_total species_annotated Percentage_nospecies Percentage_species Actinomycetota 1 1 0 100.00000 0.000000 Bacillota 10 14 4 71.42857 28.571429 Bacillota_A 18 19 1 94.73684 5.263158 Bacillota_C 1 1 0 100.00000 0.000000 Bacteroidota 13 19 6 68.42105 31.578947 Campylobacterota 3 3 0 100.00000 0.000000 Cyanobacteriota 2 2 0 100.00000 0.000000 Deferribacterota 2 2 0 100.00000 0.000000 Desulfobacterota 14 14 0 100.00000 0.000000 Elusimicrobiota 4 4 0 100.00000 0.000000 Fusobacteriota 1 2 1 50.00000 50.000000 Planctomycetota 1 1 0 100.00000 0.000000 Pseudomonadota 27 51 24 52.94118 47.058824 Synergistota 1 1 0 100.00000 0.000000 bats=c(&quot;Eb&quot;, &quot;Pk&quot;, &quot;Ha&quot;) # Initialize an empty results data frame single_sp &lt;- data.frame( Bat = character(), Single_species = numeric() ) table_upset_analysis &lt;- genome_counts_filt %&gt;% mutate(across(-genome, ~ . / sum(.))) %&gt;% column_to_rownames(&quot;genome&quot;) %&gt;% mutate(across(everything(), ~ as.integer(. &gt; 0))) %&gt;% t() %&gt;% as.data.frame() %&gt;% rownames_to_column(&quot;sample&quot;) %&gt;% left_join(sample_metadata[c(&quot;sample&quot;, &quot;Species&quot;)], by = &quot;sample&quot;) %&gt;% group_by(Species) %&gt;% summarize(across(-sample, sum), .groups = &quot;drop&quot;) %&gt;% column_to_rownames(&quot;Species&quot;) %&gt;% mutate(across(everything(), ~ as.integer(. &gt; 0))) %&gt;% t() %&gt;% as.data.frame() %&gt;% rownames_to_column(&quot;sample&quot;) unique_all &lt;- table_upset_analysis %&gt;% filter(rowSums(across(Eb:Pk)) == 1) single_sp &lt;- rbind( single_sp, data.frame( Bat = &quot;Total&quot;, # Label for the total value Single_species = nrow(unique_all) # Aggregate sum of column sums ) ) for (bat in bats) { unique &lt;- table_upset_analysis %&gt;% filter(rowSums(across(Eb:Pk)) == 1) %&gt;% select(all_of(bat)) %&gt;% filter(.&gt;0) %&gt;% nrow() # Add results to the results data frame single_sp &lt;- rbind( single_sp, data.frame( Bat = bat, Single_species = unique # Aggregate sum of column sums ) ) } single_ind &lt;- data.frame( Bat = character(), Single_individual = numeric() ) freq_table &lt;- genome_counts_filt %&gt;% mutate(across(-genome, ~ . / sum(.))) %&gt;% column_to_rownames(&quot;genome&quot;) %&gt;% mutate(across(everything(), ~ as.integer(. &gt; 0))) %&gt;% t() %&gt;% as.data.frame() %&gt;% rownames_to_column(&quot;sample&quot;) %&gt;% left_join(sample_metadata[c(&quot;sample&quot;, &quot;Species&quot;)], by = &quot;sample&quot;) %&gt;% group_by(Species) %&gt;% summarize(across(-sample, sum), .groups = &quot;drop&quot;) %&gt;% column_to_rownames(&quot;Species&quot;) %&gt;% t() %&gt;% as.data.frame() %&gt;% rownames_to_column(&quot;asv&quot;) singleton_filt &lt;- freq_table %&gt;% rowwise() %&gt;% mutate(row_sum = sum(c_across(-asv))) %&gt;% # Calculate row sum for specific columns filter(row_sum == 1) %&gt;% column_to_rownames(var = &quot;asv&quot;) %&gt;% filter(row_sum==1) single_ind &lt;- rbind( single_ind, data.frame( Bat = &quot;Total&quot;, Single_individual = nrow(singleton_filt) # Aggregate sum of column sums ) ) for (bat in bats) { singleton_filt &lt;- freq_table %&gt;% rowwise() %&gt;% mutate(row_sum = sum(c_across(-asv))) %&gt;% filter(row_sum == 1) %&gt;% column_to_rownames(var = &quot;asv&quot;) %&gt;% select(bat) %&gt;% filter(.==1) single_ind &lt;- rbind( single_ind, data.frame( Bat = bat, Single_individual = nrow(singleton_filt) # Aggregate sum of column sums ) ) } 7.2 Summary table summary_table &lt;- total_mags %&gt;% left_join(., no_annotation, by=&quot;Bat&quot;) %&gt;% left_join(., single_ind, by=&quot;Bat&quot;) %&gt;% left_join(., single_sp, by=&quot;Bat&quot;) summary_table Bat MAGs Phylum Family Genus No_genus No_species Single_individual Single_species 1 Total 135 15 58 91 28 98 34 82 2 Eb 92 12 43 63 20 73 14 49 3 Pk 69 10 38 54 12 44 11 19 4 Ha 30 5 17 24 5 13 9 14 summary_table %&gt;% select(-Phylum,-Family, -Genus) %&gt;% rowwise() %&gt;% mutate(No_genus_perc=No_genus*100/MAGs)%&gt;% mutate(No_species_perc=No_species*100/MAGs) %&gt;% mutate(Single_individual_perc=Single_individual*100/MAGs)%&gt;% mutate(Single_species_perc=Single_species*100/MAGs) %&gt;% mutate(Single_individual_per_Single_species=Single_individual*100/Single_species) %&gt;% select(1,6:11) # A tibble: 4 × 7 # Rowwise: Bat Single_species No_genus_perc No_species_perc Single_individual_perc Single_species_perc Single_individual_per_Single_species &lt;chr&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; 1 Total 82 20.7 72.6 25.2 60.7 41.5 2 Eb 49 21.7 79.3 15.2 53.3 28.6 3 Pk 19 17.4 63.8 15.9 27.5 57.9 4 Ha 14 16.7 43.3 30 46.7 64.3 7.3 Amplicon 7.3.1 Taxonomy overview load(&quot;resources/amplicon/data_nocopyfilt.Rdata&quot;) genome_metadata &lt;- genome_metadata %&gt;% filter(!is.na(phylum)) genome_counts_filt &lt;- genome_counts_filt %&gt;% filter(genome %in% genome_metadata$genome)%&gt;% mutate_at(vars(-genome),~./sum(.))%&gt;% column_to_rownames(., &quot;genome&quot;) %&gt;% .[,colSums(.)&gt;0.00005] %&gt;% filter(rowSums(across(everything())) != 0) %&gt;% rownames_to_column(., &quot;genome&quot;) genome_metadata &lt;- genome_metadata %&gt;% filter(genome %in% genome_counts_filt$genome) 7.3.1.1 Phylum level genome_counts_filt %&gt;% mutate_at(vars(-genome),~./sum(.)) %&gt;% #apply TSS nornalisation pivot_longer(-genome, names_to = &quot;sample&quot;, values_to = &quot;count&quot;) %&gt;% #reduce to minimum number of columns left_join(., genome_metadata, by = join_by(genome == genome)) %&gt;% #append genome metadata left_join(., sample_metadata, by = join_by(sample == sample)) %&gt;% #append sample metadata filter(count &gt; 0) %&gt;% #filter 0 counts ggplot(., aes(x=sample,y=count, fill=phylum, group=phylum)) + #grouping enables keeping the same sorting of taxonomic units geom_bar(stat=&quot;identity&quot;, colour=&quot;white&quot;, linewidth=0.1) + #plot stacked bars with white borders scale_fill_manual(values=phylum_colors) + facet_nested(~factor(Species, labels=c(&quot;Eb&quot; = &quot;Eptesicus&quot;, &quot;Ha&quot; = &quot;Hypsugo&quot;, &quot;Pk&quot; = &quot;Pipistrellus&quot;)), scales=&quot;free&quot;) + #facet per day and treatment guides(fill = guide_legend(ncol = 1)) + theme(axis.text.x = element_blank(), axis.ticks.x = element_blank(), axis.title.x = element_blank(), panel.background = element_blank(), panel.border = element_blank(), panel.grid.major = element_blank(), panel.grid.minor = element_blank(), strip.background = element_rect(fill = &quot;white&quot;), strip.text = element_text(size = 12, lineheight = 0.6,face=&quot;bold&quot;), axis.line = element_line(linewidth = 0.5, linetype = &quot;solid&quot;, colour = &quot;black&quot;)) + labs(fill=&quot;Phylum&quot;,y = &quot;Relative abundance&quot;,x=&quot;Samples&quot;) Phylum relative abundances phylum_summary &lt;- genome_counts_filt %&gt;% mutate_at(vars(-genome),~./sum(.)) %&gt;% pivot_longer(-genome, names_to = &quot;sample&quot;, values_to = &quot;count&quot;) %&gt;% left_join(sample_metadata, by = join_by(sample == sample)) %&gt;% left_join(genome_metadata, by = join_by(genome == genome)) %&gt;% group_by(sample,phylum,Species) %&gt;% summarise(relabun=sum(count)) phylum_summary %&gt;% group_by(phylum) %&gt;% summarise(Total_mean=mean(relabun*100, na.rm=T), Total_sd=sd(relabun*100, na.rm=T), Eb_mean=mean(relabun[Species==&quot;Eb&quot;]*100, na.rm=T), Eb_sd=sd(relabun[Species==&quot;Eb&quot;]*100, na.rm=T), Ha_mean=mean(relabun[Species==&quot;Ha&quot;]*100, na.rm=T), Ha_sd=sd(relabun[Species==&quot;Ha&quot;]*100, na.rm=T), Pk_mean=mean(relabun[Species==&quot;Pk&quot;]*100, na.rm=T), Pk_sd=sd(relabun[Species==&quot;Pk&quot;]*100, na.rm=T)) %&gt;% mutate(Total=str_c(round(Total_mean,3),&quot;±&quot;,round(Total_sd,3)), Eptesicus=str_c(round(Eb_mean,3),&quot;±&quot;,round(Eb_sd,3)), Hypsugo=str_c(round(Ha_mean,3),&quot;±&quot;,round(Ha_sd,3)), Pipistrellus=str_c(round(Pk_mean,3),&quot;±&quot;,round(Pk_sd,3))) %&gt;% arrange(-Eb_mean)%&gt;% dplyr::select(phylum,Total,Eptesicus,Hypsugo,Pipistrellus) # A tibble: 30 × 5 phylum Total Eptesicus Hypsugo Pipistrellus &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; 1 Pseudomonadota 58.806±25.926 53.499±30.532 67.515±18.835 53.697±28.06 2 Bacillota 26.442±20.944 25.488±23.748 22.918±16.066 29.919±23.604 3 Bacteroidota 4.876±7.757 5.588±8.456 5.332±8.486 4.158±7.066 4 Fusobacteriota 1.831±4.276 5.054±6.787 0.382±0.927 1.618±4.021 5 Desulfobacterota 2.107±4.594 4.449±5.799 0.327±0.938 2.58±5.419 6 Patescibacteria 0.48±2.558 2.198±5.658 0.052±0.151 0.069±0.295 7 Rs-K70 termite group 0.946±2.852 1.378±3.222 0.372±1.304 1.246±3.603 8 Synergistota 0.364±0.935 0.671±1.257 0.167±0.704 0.394±0.948 9 Planctomycetota 0.177±0.475 0.602±0.815 0.016±0.059 0.123±0.371 10 Campylobacterota 1.088±6.268 0.528±0.911 0.265±0.675 2.053±9.542 # ℹ 20 more rows 7.3.1.2 Family level Percentange of families in each group family_summary &lt;- genome_counts_filt %&gt;% mutate_at(vars(-genome),~./sum(.)) %&gt;% #apply TSS nornalisation pivot_longer(-genome, names_to = &quot;sample&quot;, values_to = &quot;count&quot;) %&gt;% #reduce to minimum number of columns left_join(sample_metadata, by = join_by(sample == sample)) %&gt;% #append sample metadata left_join(., genome_metadata, by = join_by(genome == genome)) %&gt;% #append genome metadata group_by(sample,family, Species) %&gt;% summarise(relabun=sum(count)) family_summary %&gt;% group_by(family) %&gt;% summarise(Eb_mean=mean(relabun[Species==&quot;Eb&quot;]*100, na.rm=T), Eb_sd=sd(relabun[Species==&quot;Eb&quot;]*100, na.rm=T), Ha_mean=mean(relabun[Species==&quot;Ha&quot;]*100, na.rm=T), Ha_sd=sd(relabun[Species==&quot;Ha&quot;]*100, na.rm=T), Pk_mean=mean(relabun[Species==&quot;Pk&quot;]*100, na.rm=T), Pk_sd=sd(relabun[Species==&quot;Pk&quot;]*100, na.rm=T)) %&gt;% mutate(Eptesicus=str_c(round(Eb_mean,3),&quot;±&quot;,round(Eb_sd,3)), Hypsugo=str_c(round(Ha_mean,3),&quot;±&quot;,round(Ha_sd,3)), Pipistrellus=str_c(round(Pk_mean,3),&quot;±&quot;,round(Pk_sd,3))) %&gt;% arrange(-Pk_mean) %&gt;% dplyr::select(family,Eptesicus,Hypsugo,Pipistrellus) %&gt;% left_join(., genome_metadata[c(3,6)] %&gt;% unique(), by=join_by(family==family)) # A tibble: 285 × 5 family Eptesicus Hypsugo Pipistrellus phylum &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; 1 Enterobacteriaceae 26.677±31.648 8.829±13.578 13.234±22.962 Pseudomonadota 2 Morganellaceae 0.286±0.614 4.136±6.821 9.526±19.046 Pseudomonadota 3 Yersiniaceae 0.223±0.478 9.419±14.295 6.631±18.115 Pseudomonadota 4 Enterococcaceae 6.975±10.452 2.884±4.689 5.421±10.609 Bacillota 5 Streptococcaceae 0.518±0.904 2.154±3.462 4.843±15.641 Bacillota 6 Diplorickettsiaceae 14.235±27.678 0.202±0.498 4.667±20.883 Pseudomonadota 7 Bacillaceae 0.463±0.701 7.36±9.57 4.639±14.907 Bacillota 8 Lachnospiraceae 5.118±11.827 2.331±5.594 4.137±8.837 Bacillota 9 Rickettsiaceae 0.048±0.147 6.597±15.049 4.097±13.242 Pseudomonadota 10 Pasteurellaceae 0.443±1.394 4.538±9.865 3.519±6.118 Pseudomonadota # ℹ 275 more rows family_arrange &lt;- family_summary %&gt;% group_by(family) %&gt;% summarise(mean=sum(relabun)) %&gt;% arrange(-mean) %&gt;% select(family) %&gt;% pull() # Per environment family_summary %&gt;% left_join(genome_metadata %&gt;% select(family,phylum) %&gt;% unique(),by=join_by(family==family)) %&gt;% filter(family %in% family_arrange[1:20]) %&gt;% mutate(family=factor(family,levels=rev(family_arrange[1:20]))) %&gt;% filter(relabun &gt; 0) %&gt;% ggplot(aes(x=relabun, y=family, group=family, color=phylum)) + scale_color_manual(values=phylum_colors[-8]) + geom_jitter(alpha=0.5) + facet_grid(.~Species)+ theme_minimal() + labs(y=&quot;Family&quot;, x=&quot;Relative abundance&quot;, color=&quot;Phylum&quot;) 7.3.1.3 Genus level Percetange of genera in each group genus_summary &lt;- genome_counts_filt %&gt;% mutate_at(vars(-genome),~./sum(.)) %&gt;% pivot_longer(-genome, names_to = &quot;sample&quot;, values_to = &quot;count&quot;) %&gt;% left_join(sample_metadata, by = join_by(sample == sample)) %&gt;% left_join(genome_metadata, by = join_by(genome == genome)) %&gt;% group_by(sample,phylum,genus, Species) %&gt;% summarise(relabun=sum(count)) genus_summary %&gt;% group_by(genus) %&gt;% summarise(Eb_mean=mean(relabun[Species==&quot;Eb&quot;]*100, na.rm=T), Eb_sd=sd(relabun[Species==&quot;Eb&quot;]*100, na.rm=T), Ha_mean=mean(relabun[Species==&quot;Ha&quot;]*100, na.rm=T), Ha_sd=sd(relabun[Species==&quot;Ha&quot;]*100, na.rm=T), Pk_mean=mean(relabun[Species==&quot;Pk&quot;]*100, na.rm=T), Pk_sd=sd(relabun[Species==&quot;Pk&quot;]*100, na.rm=T)) %&gt;% mutate(Eptesicus=str_c(round(Eb_mean,3),&quot;±&quot;,round(Eb_sd,3)), Hypsugo=str_c(round(Ha_mean,3),&quot;±&quot;,round(Ha_sd,3)), Pipistrellus=str_c(round(Pk_mean,3),&quot;±&quot;,round(Pk_sd,3))) %&gt;% arrange(-Pk_mean) %&gt;% dplyr::select(genus,Eptesicus,Hypsugo,Pipistrellus) %&gt;% left_join(., genome_metadata[c(3,7)] %&gt;% unique(), by=join_by(genus==genus)) # A tibble: 565 × 5 genus Eptesicus Hypsugo Pipistrellus phylum &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; 1 Serratia 0.223±0.478 9.05±14.401 6.493±18.155 Pseudomonadota 2 Morganella 0.015±0.033 2.013±6.097 5.672±14.831 Pseudomonadota 3 Enterococcus 6.975±10.452 2.884±4.688 5.418±10.61 Bacillota 4 Lactococcus 0.514±0.897 2.037±3.503 4.83±15.636 Bacillota 5 Bacillus 0.437±0.69 7.274±9.497 4.625±14.907 Bacillota 6 Rickettsiella 14.234±27.674 0.11±0.439 4.463±20.908 Pseudomonadota 7 Rickettsia 0.048±0.147 6.597±15.049 4.097±13.242 Pseudomonadota 8 Vibrio 3.254±10.076 5.492±8.443 3.046±11.078 Pseudomonadota 9 Enterobacter 15.407±26.424 4.97±10.782 2.813±6.493 Pseudomonadota 10 Lachnoclostridium 3.64±9.837 0.525±2.014 2.806±7.312 Bacillota # ℹ 555 more rows genus_summary_sort &lt;- genus_summary %&gt;% group_by(genus) %&gt;% summarise(mean=mean(relabun, na.rm=T),sd=sd(relabun, na.rm=T)) %&gt;% arrange(-mean) genus_summary %&gt;% mutate(genus=factor(genus, levels=rev(genus_summary_sort %&gt;% pull(genus)))) %&gt;% filter(relabun &gt; 0) %&gt;% ggplot(aes(x=relabun, y=genus, group=genus, color=phylum)) + scale_color_manual(values=phylum_colors) + geom_jitter(alpha=0.5) + facet_grid(.~Species)+ theme_minimal() + theme(axis.text.y = element_text(size=6))+ labs(y=&quot;Genera&quot;, x=&quot;Relative abundance&quot;, color=&quot;Phylum&quot;) Number of mags and distinct taxonomy bats=c(&quot;Eb&quot;, &quot;Pk&quot;, &quot;Ha&quot;) total_mags &lt;- data.frame( Bat = character(), MAGs = numeric(), Phylum = numeric(), Family = numeric(), Genus = numeric() ) preabs_table &lt;- genome_counts_filt %&gt;% mutate(across(-genome, ~ . / sum(.))) %&gt;% column_to_rownames(&quot;genome&quot;) %&gt;% mutate(across(everything(), ~ as.integer(. &gt; 0))) %&gt;% t() %&gt;% as.data.frame() %&gt;% rownames_to_column(&quot;sample&quot;) %&gt;% left_join(sample_metadata[c(&quot;sample&quot;, &quot;Species&quot;)], by = &quot;sample&quot;) %&gt;% group_by(Species) %&gt;% summarize(across(-sample, sum), .groups = &quot;drop&quot;) %&gt;% column_to_rownames(&quot;Species&quot;) %&gt;% t() %&gt;% as.data.frame() %&gt;% rownames_to_column(&quot;genome&quot;) %&gt;% left_join(genome_metadata, by=join_by(&quot;genome&quot;==&quot;genome&quot;)) phylum &lt;- preabs_table %&gt;% distinct(phylum) family &lt;- preabs_table %&gt;% distinct(phylum, class, order, family) genus &lt;- preabs_table %&gt;% distinct(phylum, class, order, family, genus) total_mags &lt;- rbind( total_mags, data.frame( Bat = &quot;Total&quot;, MAGs = nrow(preabs_table), Phylum = nrow(phylum), Family = nrow(family), Genus = nrow(genus) ) ) for (bat in bats) { number &lt;- preabs_table %&gt;% select({{bat}}) %&gt;% filter(.&gt;=1) phylum &lt;- preabs_table %&gt;% select({{bat}}, phylum) %&gt;% filter(!!sym(bat)&gt;=1) %&gt;% distinct(phylum) family &lt;- preabs_table %&gt;% select({{bat}}, phylum, class, order, family) %&gt;% filter(!!sym(bat)&gt;=1) %&gt;% distinct(phylum, class, order, family) genus &lt;- preabs_table %&gt;% select({{bat}}, phylum, class, order, family, genus) %&gt;% filter(!!sym(bat)&gt;=1) %&gt;% distinct(phylum, class, order, family, genus) total_mags &lt;- rbind( total_mags, data.frame( Bat = bat, MAGs = nrow(number), Phylum = nrow(phylum), Family = nrow(family), Genus = nrow(genus) ) ) } bats=c(&quot;Eb&quot;, &quot;Pk&quot;, &quot;Ha&quot;) no_annotation &lt;- data.frame( Bat = character(), No_genus = numeric(), No_species = numeric() ) preabs_table &lt;- genome_counts_filt %&gt;% mutate(across(-genome, ~ . / sum(.))) %&gt;% column_to_rownames(&quot;genome&quot;) %&gt;% mutate(across(everything(), ~ as.integer(. &gt; 0))) %&gt;% t() %&gt;% as.data.frame() %&gt;% rownames_to_column(&quot;sample&quot;) %&gt;% left_join(sample_metadata[c(&quot;sample&quot;, &quot;Species&quot;)], by = &quot;sample&quot;) %&gt;% group_by(Species) %&gt;% summarize(across(-sample, sum), .groups = &quot;drop&quot;) %&gt;% column_to_rownames(&quot;Species&quot;) %&gt;% t() %&gt;% as.data.frame() %&gt;% rownames_to_column(&quot;genome&quot;) %&gt;% left_join(genome_metadata, by=join_by(&quot;genome&quot;==&quot;genome&quot;)) genus &lt;- preabs_table %&gt;% filter(is.na(genus)) species &lt;- preabs_table %&gt;% filter(is.na(species)) no_annotation &lt;- rbind( no_annotation, data.frame( Bat = &quot;Total&quot;, No_genus = nrow(genus), No_species = nrow(species) ) ) for (bat in bats) { number &lt;- preabs_table %&gt;% select({{bat}}) %&gt;% filter(.&gt;=1) genus &lt;- preabs_table %&gt;% select({{bat}}, phylum, class, order, family, genus) %&gt;% filter(!!sym(bat)&gt;=1) %&gt;% filter(is.na(genus)) species &lt;- preabs_table %&gt;% filter(!!sym(bat)&gt;=1) %&gt;% filter(is.na(species)) no_annotation &lt;- rbind( no_annotation, data.frame( Bat = bat, No_genus = nrow(genus), No_species = nrow(species) ) ) } Total percentage of MAGs without genus-level annotation nongenera &lt;- genome_metadata %&gt;% filter(is.na(genus)) %&gt;% summarize(Mag_nogenera = n()) %&gt;% pull() nmags &lt;- total_mags %&gt;% filter(Bat==&quot;Total&quot;) %&gt;% select(MAGs) %&gt;% pull() perct &lt;- nongenera*100/nmags cat(perct) 32.13354 Percentage of MAGs without genus-level annotation by phylum total_mag_phylum &lt;- genome_metadata %&gt;% group_by(phylum) %&gt;% summarize(Total_MAGs = n()) genome_metadata %&gt;% filter(is.na(genus)) %&gt;% group_by(phylum) %&gt;% summarize(MAGs_nogenus = n()) %&gt;% left_join(total_mag_phylum, by = join_by(phylum == phylum)) %&gt;% mutate(Percentage_nogenus=100*MAGs_nogenus/Total_MAGs) %&gt;% tt() .table td.tinytable_css_id7no3em49t8tuwqb0xcpv, .table th.tinytable_css_id7no3em49t8tuwqb0xcpv { border-bottom: solid 0.1em #d3d8dc; } phylum MAGs_nogenus Total_MAGs Percentage_nogenus Actinomycetota 72 251 28.685259 Apal-E12 1 1 100.000000 Armatimonadota 1 1 100.000000 Bacillota 504 1334 37.781109 Bacteroidota 92 490 18.775510 Bdellovibrionota 4 9 44.444444 Chloroflexi 8 9 88.888889 Crenarchaeota 1 7 14.285714 Cyanobacteriota 18 53 33.962264 Dependentiae 1 1 100.000000 Desulfobacterota 41 185 22.162162 Halobacterota 1 35 2.857143 Myxococcota 2 5 40.000000 Patescibacteria 38 60 63.333333 Planctomycetota 60 70 85.714286 Pseudomonadota 349 1176 29.676871 Rs-K70 termite group 16 16 100.000000 Spirochaetota 2 7 28.571429 Synergistota 13 28 46.428571 Thermoplasmatota 2 3 66.666667 Verrucomicrobiota 6 35 17.142857 Number of bacterial species genome_metadata %&gt;% filter(domain == &quot;Bacteria&quot;)%&gt;% dplyr::select(species) %&gt;% unique() %&gt;% pull() %&gt;% length() %&gt;% cat() 162 Total percentage of MAGs without species-level annotation nonspecies &lt;- genome_metadata %&gt;% filter(species == &quot;&quot;) %&gt;% summarize(Mag_nospecies = n()) %&gt;% pull() perct &lt;- nonspecies*100/nmags cat(perct) 0 MAGs without species-level annotation total_mag_phylum &lt;- genome_metadata %&gt;% group_by(phylum) %&gt;% summarize(MAGs_total = n()) genome_metadata %&gt;% filter(is.na(species)) %&gt;% group_by(phylum) %&gt;% summarize(MAGs_nospecies = n()) %&gt;% left_join(total_mag_phylum, by = join_by(phylum == phylum)) %&gt;% mutate(species_annotated=MAGs_total-MAGs_nospecies) %&gt;% mutate(Percentage_nospecies=100*MAGs_nospecies/MAGs_total) %&gt;% mutate(Percentage_species=100-100*MAGs_nospecies/MAGs_total)%&gt;% tt() .table td.tinytable_css_id6u7r0qk0c1h3ebdgslxw, .table th.tinytable_css_id6u7r0qk0c1h3ebdgslxw { border-bottom: solid 0.1em #d3d8dc; } phylum MAGs_nospecies MAGs_total species_annotated Percentage_nospecies Percentage_species Actinomycetota 228 251 23 90.83665 9.163347 Apal-E12 1 1 0 100.00000 0.000000 Armatimonadota 1 1 0 100.00000 0.000000 Bacillota 1288 1334 46 96.55172 3.448276 Bacteroidota 468 490 22 95.51020 4.489796 Bdellovibrionota 9 9 0 100.00000 0.000000 Campylobacterota 10 13 3 76.92308 23.076923 Chloroflexi 9 9 0 100.00000 0.000000 Crenarchaeota 7 7 0 100.00000 0.000000 Cyanobacteriota 51 53 2 96.22642 3.773585 Deferribacterota 9 9 0 100.00000 0.000000 Deinococcota 5 5 0 100.00000 0.000000 Dependentiae 1 1 0 100.00000 0.000000 Desulfobacterota 185 185 0 100.00000 0.000000 Elusimicrobiota 5 5 0 100.00000 0.000000 Euryarchaeota 3 3 0 100.00000 0.000000 Fusobacteriota 15 19 4 78.94737 21.052632 Halobacterota 35 35 0 100.00000 0.000000 Myxococcota 5 5 0 100.00000 0.000000 Nanohaloarchaeota 2 2 0 100.00000 0.000000 Patescibacteria 60 60 0 100.00000 0.000000 Planctomycetota 70 70 0 100.00000 0.000000 Pseudomonadota 1082 1176 94 92.00680 7.993197 Rs-K70 termite group 16 16 0 100.00000 0.000000 Spirochaetota 7 7 0 100.00000 0.000000 Sumerlaeota 1 1 0 100.00000 0.000000 Synergistota 28 28 0 100.00000 0.000000 Thermoplasmatota 3 3 0 100.00000 0.000000 Verrucomicrobiota 35 35 0 100.00000 0.000000 ASVs in single species bats=c(&quot;Eb&quot;, &quot;Pk&quot;, &quot;Ha&quot;) # Initialize an empty results data frame single_sp &lt;- data.frame( Bat = character(), Single_species = numeric() ) table_upset_analysis &lt;- genome_counts_filt %&gt;% mutate(across(-genome, ~ . / sum(.))) %&gt;% column_to_rownames(&quot;genome&quot;) %&gt;% mutate(across(everything(), ~ as.integer(. &gt; 0))) %&gt;% t() %&gt;% as.data.frame() %&gt;% rownames_to_column(&quot;sample&quot;) %&gt;% left_join(sample_metadata[c(&quot;sample&quot;, &quot;Species&quot;)], by = &quot;sample&quot;) %&gt;% group_by(Species) %&gt;% summarize(across(-sample, sum), .groups = &quot;drop&quot;) %&gt;% column_to_rownames(&quot;Species&quot;) %&gt;% mutate(across(everything(), ~ as.integer(. &gt; 0))) %&gt;% t() %&gt;% as.data.frame() %&gt;% rownames_to_column(&quot;sample&quot;) unique_all &lt;- table_upset_analysis %&gt;% filter(rowSums(across(Eb:Pk)) == 1) single_sp &lt;- rbind( single_sp, data.frame( Bat = &quot;Total&quot;, # Label for the total value Single_species = nrow(unique_all) # Aggregate sum of column sums ) ) for (bat in bats) { unique &lt;- table_upset_analysis %&gt;% filter(rowSums(across(Eb:Pk)) == 1) %&gt;% select(bat) %&gt;% filter(.&gt;0) %&gt;% nrow() # Add results to the results data frame single_sp &lt;- rbind( single_sp, data.frame( Bat = bat, Single_species = unique # Aggregate sum of column sums ) ) } ASVs in a single individual single_ind &lt;- data.frame( Bat = character(), Single_individual = numeric() ) singleton_filt &lt;- freq_table %&gt;% rowwise() %&gt;% mutate(row_sum = sum(c_across(-asv))) %&gt;% # Calculate row sum for specific columns filter(row_sum == 1) %&gt;% column_to_rownames(var = &quot;asv&quot;) %&gt;% filter(row_sum==1) single_ind &lt;- rbind( single_ind, data.frame( Bat = &quot;Total&quot;, Single_individual = nrow(singleton_filt) # Aggregate sum of column sums ) ) for (bat in bats) { singleton_filt &lt;- freq_table %&gt;% rowwise() %&gt;% mutate(row_sum = sum(c_across(-asv))) %&gt;% filter(row_sum == 1) %&gt;% column_to_rownames(var = &quot;asv&quot;) %&gt;% select(bat) %&gt;% filter(.==1) single_ind &lt;- rbind( single_ind, data.frame( Bat = bat, Single_individual = nrow(singleton_filt) # Aggregate sum of column sums ) ) } 7.4 Summary table summary_table &lt;- total_mags %&gt;% left_join(., no_annotation, by=&quot;Bat&quot;) %&gt;% left_join(., single_ind, by=&quot;Bat&quot;) %&gt;% left_join(., single_sp, by=&quot;Bat&quot;) summary_table Bat MAGs Phylum Family Genus No_genus No_species Single_individual Single_species 1 Total 3834 30 328 732 1232 3639 34 3387 2 Eb 1381 19 158 294 481 1326 14 1093 3 Pk 1523 25 217 408 511 1443 11 1140 4 Ha 1500 24 239 496 361 1387 9 1154 summary_table %&gt;% select(-Phylum,-Family, -Genus) %&gt;% rowwise() %&gt;% mutate(No_genus_perc=No_genus*100/MAGs)%&gt;% mutate(No_species_perc=No_species*100/MAGs) %&gt;% mutate(Single_individual_perc=Single_individual*100/MAGs)%&gt;% mutate(Single_species_perc=Single_species*100/MAGs) %&gt;% mutate(Single_individual_per_unique=Single_individual*100/Single_species) %&gt;% select(1,6:11) # A tibble: 4 × 7 # Rowwise: Bat Single_species No_genus_perc No_species_perc Single_individual_perc Single_species_perc Single_individual_per_unique &lt;chr&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; 1 Total 3387 32.1 94.9 0.887 88.3 1.00 2 Eb 1093 34.8 96.0 1.01 79.1 1.28 3 Pk 1140 33.6 94.7 0.722 74.9 0.965 4 Ha 1154 24.1 92.5 0.6 76.9 0.780 "],["alpha-diversity.html", "Chapter 8 Alpha diversity 8.1 Metagenomics 8.2 Amplicon", " Chapter 8 Alpha diversity 8.1 Metagenomics load(&quot;resources/metagenomics/data_filtered.Rdata&quot;) treatment_colors &lt;- c(&quot;#e5bd5b&quot;, &quot;#6b7398&quot;, &quot;#76b183&quot;, &quot;#d57d2c&quot;, &quot;#2a2d26&quot;, &quot;#f9d4cc&quot;, &quot;#3c634e&quot;, &quot;#ea68c3&quot;) # Calculate Hill numbers richness &lt;- genome_counts_filt %&gt;% column_to_rownames(var = &quot;genome&quot;) %&gt;% dplyr::select(where(~ !all(. == 0))) %&gt;% hilldiv(., q = 0) %&gt;% t() %&gt;% as.data.frame() %&gt;% dplyr::rename(richness = 1) %&gt;% rownames_to_column(var = &quot;sample&quot;) neutral &lt;- genome_counts_filt %&gt;% column_to_rownames(var = &quot;genome&quot;) %&gt;% dplyr::select(where(~ !all(. == 0))) %&gt;% hilldiv(., q = 1) %&gt;% t() %&gt;% as.data.frame() %&gt;% dplyr::rename(neutral = 1) %&gt;% rownames_to_column(var = &quot;sample&quot;) phylogenetic &lt;- genome_counts_filt %&gt;% column_to_rownames(var = &quot;genome&quot;) %&gt;% dplyr::select(where(~ !all(. == 0))) %&gt;% hilldiv(., q = 1, tree = genome_tree) %&gt;% t() %&gt;% as.data.frame() %&gt;% dplyr::rename(phylogenetic = 1) %&gt;% rownames_to_column(var = &quot;sample&quot;) # Aggregate basal GIFT into elements dist &lt;- genome_gifts %&gt;% to.elements(., GIFT_db) %&gt;% traits2dist(., method = &quot;gower&quot;) functional &lt;- genome_counts_filt %&gt;% filter(genome %in% rownames(dist)) %&gt;% column_to_rownames(var = &quot;genome&quot;) %&gt;% dplyr::select(where(~ !all(. == 0))) %&gt;% hilldiv(., q = 1, dist = dist) %&gt;% t() %&gt;% as.data.frame() %&gt;% dplyr::rename(functional = 1) %&gt;% rownames_to_column(var = &quot;sample&quot;) %&gt;% mutate(functional = if_else(is.nan(functional), 1, functional)) # Merge all metrics alpha_div &lt;- richness %&gt;% full_join(neutral, by = join_by(sample == sample)) %&gt;% full_join(phylogenetic, by = join_by(sample == sample)) %&gt;% full_join(functional, by = join_by(sample == sample)) .table td.tinytable_css_idgdc71gt9nhh4cic4jc1c, .table th.tinytable_css_idgdc71gt9nhh4cic4jc1c { border-bottom: solid 0.1em #d3d8dc; } alpha Total Eptesicus Pipistrellus Hypsugo richness 9±11.446 19.7±18.595 8.818±8.727 3.579±2.735 neutral 4.417±5.064 7.326±6.867 5.05±5.48 2.153±1.424 phylogenetic 2.287±1.527 3.049±2.331 2.64±1.399 1.477±0.555 functional 1.28±0.217 1.358±0.219 1.333±0.222 1.177±0.175 8.1.1 Mixed models alpha_div_meta &lt;- alpha_div %&gt;% left_join(sample_metadata, by = join_by(sample == sample)) Model_richness_random &lt;- lme(fixed = richness ~ Species, data = alpha_div_meta, random = ~ 1 | Habitat) summary(Model_richness_random) Linear mixed-effects model fit by REML Data: alpha_div_meta AIC BIC logLik 376.0622 385.4182 -183.0311 Random effects: Formula: ~1 | Habitat (Intercept) Residual StdDev: 0.000387573 10.04781 Fixed effects: richness ~ Species Value Std.Error DF t-value p-value (Intercept) 19.70000 3.177396 46 6.200046 0.0000 SpeciesHa -16.12105 3.925486 46 -4.106766 0.0002 SpeciesPk -10.88182 3.832083 46 -2.839661 0.0067 Correlation: (Intr) SpecsH SpeciesHa -0.809 SpeciesPk -0.829 0.671 Standardized Within-Group Residuals: Min Q1 Med Q3 Max -1.8611026 -0.5790499 -0.2566677 0.2788106 3.4136803 Number of Observations: 51 Number of Groups: 3 anova(Model_richness_random) numDF denDF F-value p-value (Intercept) 1 46 40.91783 &lt;.0001 Species 2 46 8.43910 8e-04 emmeans(Model_richness_random, pairwise ~ Species) $emmeans Species emmean SE df lower.CL upper.CL Eb 19.70 3.18 2 6.029 33.4 Ha 3.58 2.31 2 -6.339 13.5 Pk 8.82 2.14 2 -0.399 18.0 Degrees-of-freedom method: containment Confidence level used: 0.95 $contrasts contrast estimate SE df t.ratio p.value Eb - Ha 16.12 3.93 46 4.107 0.0005 Eb - Pk 10.88 3.83 46 2.840 0.0181 Ha - Pk -5.24 3.15 46 -1.665 0.2295 Degrees-of-freedom method: containment P value adjustment: tukey method for comparing a family of 3 estimates Model_richness&lt;- lm(formula = richness ~ Species*Habitat, data = alpha_div_meta) Model_richness&lt;- lm(formula = richness ~ Species, data = alpha_div_meta) summary(Model_richness) Call: lm(formula = richness ~ Species, data = alpha_div_meta) Residuals: Min 1Q Median 3Q Max -18.700 -5.818 -2.579 2.801 34.300 Coefficients: Estimate Std. Error t value Pr(&gt;|t|) (Intercept) 19.700 3.177 6.200 1.24e-07 *** SpeciesHa -16.121 3.925 -4.107 0.000155 *** SpeciesPk -10.882 3.832 -2.840 0.006604 ** --- Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 Residual standard error: 10.05 on 48 degrees of freedom Multiple R-squared: 0.2602, Adjusted R-squared: 0.2293 F-statistic: 8.439 on 2 and 48 DF, p-value: 0.0007235 anova(Model_richness) Analysis of Variance Table Response: richness Df Sum Sq Mean Sq F value Pr(&gt;F) Species 2 1704 852.00 8.4391 0.0007235 *** Residuals 48 4846 100.96 --- Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 emmeans(Model_richness, pairwise ~ Species) $emmeans Species emmean SE df lower.CL upper.CL Eb 19.70 3.18 48 13.31 26.09 Ha 3.58 2.31 48 -1.06 8.21 Pk 8.82 2.14 48 4.51 13.13 Confidence level used: 0.95 $contrasts contrast estimate SE df t.ratio p.value Eb - Ha 16.12 3.93 48 4.107 0.0004 Eb - Pk 10.88 3.83 48 2.840 0.0178 Ha - Pk -5.24 3.15 48 -1.665 0.2291 P value adjustment: tukey method for comparing a family of 3 estimates Model_richness_river_random &lt;- lme(fixed = richness ~ Habitat, data = alpha_div_meta, random = ~ 1 | Species) summary(Model_richness_river_random) Linear mixed-effects model fit by REML Data: alpha_div_meta AIC BIC logLik 381.6106 390.9666 -185.8053 Random effects: Formula: ~1 | Species (Intercept) Residual StdDev: 7.661252 10.2432 Fixed effects: richness ~ Habitat Value Std.Error DF t-value p-value (Intercept) 10.689822 4.903078 46 2.1802268 0.0344 HabitatMed -2.175912 4.871350 46 -0.4466753 0.6572 HabitatNat -0.037512 3.677900 46 -0.0101992 0.9919 Correlation: (Intr) HbttMd HabitatMed -0.113 HabitatNat -0.288 0.072 Standardized Within-Group Residuals: Min Q1 Med Q3 Max -1.6934470 -0.5787041 -0.2449668 0.2756573 3.4843774 Number of Observations: 51 Number of Groups: 3 anova(Model_richness_river_random) numDF denDF F-value p-value (Intercept) 1 46 5.020207 0.0299 Habitat 2 46 0.099997 0.9050 #emmeans(Model_richness_river_random, pairwise ~ Habitat) Model_neutral_random &lt;- lme(fixed = neutral ~ Species, data = alpha_div_meta, random = ~ 1 | Habitat) summary(Model_neutral_random) Linear mixed-effects model fit by REML Data: alpha_div_meta AIC BIC logLik 304.5177 313.8737 -147.2589 Random effects: Formula: ~1 | Habitat (Intercept) Residual StdDev: 0.0005085479 4.768823 Fixed effects: neutral ~ Species Value Std.Error DF t-value p-value (Intercept) 7.325822 1.508034 46 4.857861 0.0000 SpeciesHa -5.172815 1.863088 46 -2.776473 0.0079 SpeciesPk -2.275571 1.818758 46 -1.251168 0.2172 Correlation: (Intr) SpecsH SpeciesHa -0.809 SpeciesPk -0.829 0.671 Standardized Within-Group Residuals: Min Q1 Med Q3 Max -1.32649543 -0.58630386 -0.24178015 0.08818466 2.72269748 Number of Observations: 51 Number of Groups: 3 anova(Model_neutral_random) numDF denDF F-value p-value (Intercept) 1 46 43.75396 &lt;.0001 Species 2 46 4.19543 0.0212 emmeans(Model_neutral_random, pairwise ~ Species) $emmeans Species emmean SE df lower.CL upper.CL Eb 7.33 1.51 2 0.837 13.81 Ha 2.15 1.09 2 -2.554 6.86 Pk 5.05 1.02 2 0.676 9.42 Degrees-of-freedom method: containment Confidence level used: 0.95 $contrasts contrast estimate SE df t.ratio p.value Eb - Ha 5.17 1.86 46 2.776 0.0212 Eb - Pk 2.28 1.82 46 1.251 0.4298 Ha - Pk -2.90 1.49 46 -1.940 0.1391 Degrees-of-freedom method: containment P value adjustment: tukey method for comparing a family of 3 estimates Model_neutral&lt;- lm(formula = neutral ~ Species*Habitat, data = alpha_div_meta) summary(Model_neutral) Call: lm(formula = neutral ~ Species * Habitat, data = alpha_div_meta) Residuals: Min 1Q Median 3Q Max -7.037 -2.930 -1.121 1.061 12.273 Coefficients: (2 not defined because of singularities) Estimate Std. Error t value Pr(&gt;|t|) (Intercept) 8.037 1.988 4.043 0.000209 *** SpeciesHa -5.814 2.811 -2.068 0.044519 * SpeciesPk -2.123 2.352 -0.902 0.371706 HabitatMed -2.351 2.352 -1.000 0.322994 HabitatNat -1.779 3.143 -0.566 0.574252 SpeciesHa:HabitatMed NA NA NA NA SpeciesPk:HabitatMed NA NA NA NA SpeciesHa:HabitatNat 1.676 3.956 0.424 0.673829 SpeciesPk:HabitatNat -3.136 5.930 -0.529 0.599595 --- Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 Residual standard error: 4.869 on 44 degrees of freedom Multiple R-squared: 0.1866, Adjusted R-squared: 0.07571 F-statistic: 1.683 on 6 and 44 DF, p-value: 0.1479 anova(Model_neutral) Analysis of Variance Table Response: neutral Df Sum Sq Mean Sq F value Pr(&gt;F) Species 2 190.82 95.411 4.0247 0.02482 * Habitat 2 29.84 14.921 0.6294 0.53765 Species:Habitat 2 18.67 9.334 0.3937 0.67689 Residuals 44 1043.09 23.707 --- Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 Model_neutral&lt;- lm(formula = neutral ~ Species+Habitat, data = alpha_div_meta) summary(Model_neutral) Call: lm(formula = neutral ~ Species + Habitat, data = alpha_div_meta) Residuals: Min 1Q Median 3Q Max -6.8255 -2.9109 -0.7585 0.9929 12.4843 Coefficients: Estimate Std. Error t value Pr(&gt;|t|) (Intercept) 7.826 1.675 4.673 2.61e-05 *** SpeciesHa -4.818 1.943 -2.480 0.0169 * SpeciesPk -2.140 2.026 -1.056 0.2964 HabitatMed -2.122 2.303 -0.921 0.3616 HabitatNat -1.249 1.761 -0.709 0.4817 --- Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 Residual standard error: 4.804 on 46 degrees of freedom Multiple R-squared: 0.1721, Adjusted R-squared: 0.1001 F-statistic: 2.39 on 4 and 46 DF, p-value: 0.06444 anova(Model_neutral) Analysis of Variance Table Response: neutral Df Sum Sq Mean Sq F value Pr(&gt;F) Species 2 190.82 95.411 4.1336 0.02234 * Habitat 2 29.84 14.921 0.6464 0.52861 Residuals 46 1061.76 23.082 --- Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 emmeans(Model_neutral, pairwise ~ Species) $emmeans Species emmean SE df lower.CL upper.CL Eb 6.70 1.70 46 3.27 10.13 Ha 1.88 1.46 46 -1.06 4.83 Pk 4.56 1.15 46 2.24 6.89 Results are averaged over the levels of: Habitat Confidence level used: 0.95 $contrasts contrast estimate SE df t.ratio p.value Eb - Ha 4.82 1.94 46 2.480 0.0437 Eb - Pk 2.14 2.03 46 1.056 0.5457 Ha - Pk -2.68 1.96 46 -1.364 0.3681 Results are averaged over the levels of: Habitat P value adjustment: tukey method for comparing a family of 3 estimates Model_neutral_river_random &lt;- lme(fixed = neutral ~ Habitat, data = alpha_div_meta, random = ~ 1 | Species) summary(Model_neutral_river_random) Linear mixed-effects model fit by REML Data: alpha_div_meta AIC BIC logLik 307.0823 316.4383 -148.5412 Random effects: Formula: ~1 | Species (Intercept) Residual StdDev: 2.006524 4.803003 Fixed effects: neutral ~ Habitat Value Std.Error DF t-value p-value (Intercept) 5.518864 1.515311 46 3.642067 0.0007 HabitatMed -2.096718 2.257895 46 -0.928617 0.3579 HabitatNat -1.660903 1.669514 46 -0.994842 0.3250 Correlation: (Intr) HbttMd HabitatMed -0.191 HabitatNat -0.425 0.109 Standardized Within-Group Residuals: Min Q1 Med Q3 Max -1.2679511 -0.5878946 -0.2384058 0.2184124 2.7524260 Number of Observations: 51 Number of Groups: 3 anova(Model_neutral_river_random) numDF denDF F-value p-value (Intercept) 1 46 12.033901 0.0011 Habitat 2 46 0.835044 0.4403 emmeans(Model_neutral_river_random, pairwise ~ Habitat) $emmeans Habitat emmean SE df lower.CL upper.CL Anth 5.52 1.52 2 -1.00 12.0 Med 3.42 2.47 2 -7.19 14.0 Nat 3.86 1.71 2 -3.51 11.2 Degrees-of-freedom method: containment Confidence level used: 0.95 $contrasts contrast estimate SE df t.ratio p.value Anth - Med 2.097 2.26 46 0.929 0.6252 Anth - Nat 1.661 1.67 46 0.995 0.5838 Med - Nat -0.436 2.66 46 -0.164 0.9853 Degrees-of-freedom method: containment P value adjustment: tukey method for comparing a family of 3 estimates Model_phylogenetic_random &lt;- lme(fixed = phylogenetic ~ Species, data = alpha_div_meta, random = ~ 1 | Habitat) summary(Model_phylogenetic_random) Linear mixed-effects model fit by REML Data: alpha_div_meta AIC BIC logLik 187.5991 196.9551 -88.79953 Random effects: Formula: ~1 | Habitat (Intercept) Residual StdDev: 4.757509e-05 1.410856 Fixed effects: phylogenetic ~ Species Value Std.Error DF t-value p-value (Intercept) 3.0487852 0.4461519 46 6.833514 0.0000 SpeciesHa -1.5719549 0.5511946 46 -2.851905 0.0065 SpeciesPk -0.4090825 0.5380795 46 -0.760264 0.4510 Correlation: (Intr) SpecsH SpeciesHa -0.809 SpeciesPk -0.829 0.671 Standardized Within-Group Residuals: Min Q1 Med Q3 Max -1.4521573 -0.5120973 -0.2030471 0.3967416 3.9444726 Number of Observations: 51 Number of Groups: 3 anova(Model_phylogenetic_random) numDF denDF F-value p-value (Intercept) 1 46 133.9734 &lt;.0001 Species 2 46 5.2778 0.0086 emmeans(Model_phylogenetic_random, pairwise ~ Species) $emmeans Species emmean SE df lower.CL upper.CL Eb 3.05 0.446 2 1.1291 4.97 Ha 1.48 0.324 2 0.0842 2.87 Pk 2.64 0.301 2 1.3455 3.93 Degrees-of-freedom method: containment Confidence level used: 0.95 $contrasts contrast estimate SE df t.ratio p.value Eb - Ha 1.572 0.551 46 2.852 0.0175 Eb - Pk 0.409 0.538 46 0.760 0.7290 Ha - Pk -1.163 0.442 46 -2.632 0.0304 Degrees-of-freedom method: containment P value adjustment: tukey method for comparing a family of 3 estimates Model_phylogenetic&lt;- lm(formula = phylogenetic ~ Species*Habitat, data = alpha_div_meta) summary(Model_phylogenetic) Call: lm(formula = phylogenetic ~ Species * Habitat, data = alpha_div_meta) Residuals: Min 1Q Median 3Q Max -2.3225 -0.7981 -0.1672 0.5270 5.2914 Coefficients: (2 not defined because of singularities) Estimate Std. Error t value Pr(&gt;|t|) (Intercept) 3.32250 0.58889 5.642 1.13e-06 *** SpeciesHa -1.92117 0.83281 -2.307 0.0258 * SpeciesPk -0.61200 0.69678 -0.878 0.3845 HabitatMed 0.02549 0.69678 0.037 0.9710 HabitatNat -0.68428 0.93111 -0.735 0.4663 SpeciesHa:HabitatMed NA NA NA NA SpeciesPk:HabitatMed NA NA NA NA SpeciesHa:HabitatNat 0.79464 1.17209 0.678 0.5013 SpeciesPk:HabitatNat -1.02621 1.75681 -0.584 0.5621 --- Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 Residual standard error: 1.442 on 44 degrees of freedom Multiple R-squared: 0.2145, Adjusted R-squared: 0.1074 F-statistic: 2.003 on 6 and 44 DF, p-value: 0.08561 anova(Model_phylogenetic) Analysis of Variance Table Response: phylogenetic Df Sum Sq Mean Sq F value Pr(&gt;F) Species 2 21.011 10.5055 5.0490 0.01062 * Habitat 2 1.125 0.5623 0.2702 0.76447 Species:Habitat 2 2.869 1.4344 0.6894 0.50724 Residuals 44 91.552 2.0807 --- Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 Model_phylogenetic&lt;- lm(formula = phylogenetic ~ Species, data = alpha_div_meta) summary(Model_phylogenetic) Call: lm(formula = phylogenetic ~ Species, data = alpha_div_meta) Residuals: Min 1Q Median 3Q Max -2.0488 -0.7225 -0.2865 0.5597 5.5651 Coefficients: Estimate Std. Error t value Pr(&gt;|t|) (Intercept) 3.0488 0.4462 6.834 1.32e-08 *** SpeciesHa -1.5720 0.5512 -2.852 0.00639 ** SpeciesPk -0.4091 0.5381 -0.760 0.45082 --- Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 Residual standard error: 1.411 on 48 degrees of freedom Multiple R-squared: 0.1803, Adjusted R-squared: 0.1461 F-statistic: 5.278 on 2 and 48 DF, p-value: 0.008475 anova(Model_phylogenetic) Analysis of Variance Table Response: phylogenetic Df Sum Sq Mean Sq F value Pr(&gt;F) Species 2 21.011 10.5055 5.2778 0.008475 ** Residuals 48 95.545 1.9905 --- Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 emmeans(Model_phylogenetic, pairwise ~ Species) $emmeans Species emmean SE df lower.CL upper.CL Eb 3.05 0.446 48 2.152 3.95 Ha 1.48 0.324 48 0.826 2.13 Pk 2.64 0.301 48 2.035 3.24 Confidence level used: 0.95 $contrasts contrast estimate SE df t.ratio p.value Eb - Ha 1.572 0.551 48 2.852 0.0173 Eb - Pk 0.409 0.538 48 0.760 0.7289 Ha - Pk -1.163 0.442 48 -2.632 0.0301 P value adjustment: tukey method for comparing a family of 3 estimates Model_phylogenetic_river_random &lt;- lme(fixed = phylogenetic ~ Habitat, data = alpha_div_meta, random = ~ 1 | Species) summary(Model_phylogenetic_river_random) Linear mixed-effects model fit by REML Data: alpha_div_meta AIC BIC logLik 191.0292 200.3852 -90.51459 Random effects: Formula: ~1 | Species (Intercept) Residual StdDev: 0.6216728 1.432282 Fixed effects: phylogenetic ~ Habitat Value Std.Error DF t-value p-value (Intercept) 2.5289760 0.4624892 46 5.468184 0.0000 HabitatMed 0.1272296 0.6739811 46 0.188773 0.8511 HabitatNat -0.5062640 0.4992765 46 -1.013995 0.3159 Correlation: (Intr) HbttMd HabitatMed -0.185 HabitatNat -0.416 0.106 Standardized Within-Group Residuals: Min Q1 Med Q3 Max -1.3969527 -0.6718188 -0.2098204 0.3962845 3.9189496 Number of Observations: 51 Number of Groups: 3 anova(Model_phylogenetic_river_random) numDF denDF F-value p-value (Intercept) 1 46 32.10516 &lt;.0001 Habitat 2 46 0.55846 0.5759 emmeans(Model_phylogenetic_river_random, pairwise ~ Habitat) $emmeans Habitat emmean SE df lower.CL upper.CL Anth 2.53 0.462 2 0.539 4.52 Med 2.66 0.743 2 -0.542 5.85 Nat 2.02 0.520 2 -0.217 4.26 Degrees-of-freedom method: containment Confidence level used: 0.95 $contrasts contrast estimate SE df t.ratio p.value Anth - Med -0.127 0.674 46 -0.189 0.9806 Anth - Nat 0.506 0.499 46 1.014 0.5719 Med - Nat 0.633 0.795 46 0.797 0.7069 Degrees-of-freedom method: containment P value adjustment: tukey method for comparing a family of 3 estimates Model_functional_random &lt;- lme(fixed = functional ~ Species, data = alpha_div_meta, random = ~ 1 | Habitat) summary(Model_functional_random) Linear mixed-effects model fit by REML Data: alpha_div_meta AIC BIC logLik 2.48054 11.83654 3.75973 Random effects: Formula: ~1 | Habitat (Intercept) Residual StdDev: 0.03290678 0.2040392 Fixed effects: functional ~ Species Value Std.Error DF t-value p-value (Intercept) 1.3675380 0.06846759 46 19.973507 0.0000 SpeciesHa -0.1839105 0.08048094 46 -2.285144 0.0270 SpeciesPk -0.0301268 0.07901368 46 -0.381286 0.7047 Correlation: (Intr) SpecsH SpeciesHa -0.762 SpeciesPk -0.788 0.639 Standardized Within-Group Residuals: Min Q1 Med Q3 Max -1.7374535 -0.8157247 0.0842103 0.7710483 2.5947667 Number of Observations: 51 Number of Groups: 3 anova(Model_functional_random) numDF denDF F-value p-value (Intercept) 1 46 1323.0814 &lt;.0001 Species 2 46 3.5926 0.0355 emmeans(Model_functional_random, pairwise ~ Species) $emmeans Species emmean SE df lower.CL upper.CL Eb 1.37 0.0685 2 1.073 1.66 Ha 1.18 0.0526 2 0.957 1.41 Pk 1.34 0.0491 2 1.126 1.55 Degrees-of-freedom method: containment Confidence level used: 0.95 $contrasts contrast estimate SE df t.ratio p.value Eb - Ha 0.1839 0.0805 46 2.285 0.0680 Eb - Pk 0.0301 0.0790 46 0.381 0.9231 Ha - Pk -0.1538 0.0678 46 -2.268 0.0706 Degrees-of-freedom method: containment P value adjustment: tukey method for comparing a family of 3 estimates Model_functional&lt;- lm(formula = functional ~ Species*Habitat, data = alpha_div_meta) summary(Model_functional) Call: lm(formula = functional ~ Species * Habitat, data = alpha_div_meta) Residuals: Min 1Q Median 3Q Max -0.42687 -0.16654 0.01457 0.12376 0.42028 Coefficients: (2 not defined because of singularities) Estimate Std. Error t value Pr(&gt;|t|) (Intercept) 1.296263 0.081011 16.001 &lt;2e-16 *** SpeciesHa -0.097317 0.114566 -0.849 0.4002 SpeciesPk 0.006682 0.095853 0.070 0.9447 HabitatMed 0.160659 0.095853 1.676 0.1008 HabitatNat 0.154637 0.128089 1.207 0.2338 SpeciesHa:HabitatMed NA NA NA NA SpeciesPk:HabitatMed NA NA NA NA SpeciesHa:HabitatNat -0.187045 0.161240 -1.160 0.2523 SpeciesPk:HabitatNat -0.457583 0.241678 -1.893 0.0649 . --- Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 Residual standard error: 0.1984 on 44 degrees of freedom Multiple R-squared: 0.2616, Adjusted R-squared: 0.1609 F-statistic: 2.598 on 6 and 44 DF, p-value: 0.03048 anova(Model_functional) Analysis of Variance Table Response: functional Df Sum Sq Mean Sq F value Pr(&gt;F) Species 2 0.32526 0.162631 4.1302 0.02271 * Habitat 2 0.14103 0.070513 1.7908 0.17878 Species:Habitat 2 0.14746 0.073729 1.8724 0.16580 Residuals 44 1.73256 0.039376 --- Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 Model_functional&lt;- lm(formula = functional ~ Species, data = alpha_div_meta) summary(Model_functional) Call: lm(formula = functional ~ Species, data = alpha_div_meta) Residuals: Min 1Q Median 3Q Max -0.35812 -0.17383 0.00857 0.15667 0.55089 Coefficients: Estimate Std. Error t value Pr(&gt;|t|) (Intercept) 1.35812 0.06489 20.930 &lt;2e-16 *** SpeciesHa -0.18135 0.08017 -2.262 0.0283 * SpeciesPk -0.02513 0.07826 -0.321 0.7495 --- Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 Residual standard error: 0.2052 on 48 degrees of freedom Multiple R-squared: 0.1386, Adjusted R-squared: 0.1027 F-statistic: 3.863 on 2 and 48 DF, p-value: 0.02783 anova(Model_functional) Analysis of Variance Table Response: functional Df Sum Sq Mean Sq F value Pr(&gt;F) Species 2 0.32526 0.162631 3.8625 0.02783 * Residuals 48 2.02104 0.042105 --- Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 emmeans(Model_functional, pairwise ~ Species) $emmeans Species emmean SE df lower.CL upper.CL Eb 1.36 0.0649 48 1.23 1.49 Ha 1.18 0.0471 48 1.08 1.27 Pk 1.33 0.0437 48 1.25 1.42 Confidence level used: 0.95 $contrasts contrast estimate SE df t.ratio p.value Eb - Ha 0.1813 0.0802 48 2.262 0.0711 Eb - Pk 0.0251 0.0783 48 0.321 0.9448 Ha - Pk -0.1562 0.0643 48 -2.431 0.0486 P value adjustment: tukey method for comparing a family of 3 estimates Model_functional_river_random &lt;- lme(fixed = functional ~ Habitat, data = alpha_div_meta, random = ~ 1 | Species) summary(Model_functional_river_random) Linear mixed-effects model fit by REML Data: alpha_div_meta AIC BIC logLik 2.465301 11.82131 3.767349 Random effects: Formula: ~1 | Species (Intercept) Residual StdDev: 0.0703315 0.2020894 Fixed effects: functional ~ Habitat Value Std.Error DF t-value p-value (Intercept) 1.2762890 0.05757849 46 22.166070 0.0000 HabitatMed 0.1811338 0.09452337 46 1.916285 0.0616 HabitatNat -0.0263883 0.06921279 46 -0.381264 0.7048 Correlation: (Intr) HbttMd HabitatMed -0.221 HabitatNat -0.465 0.127 Standardized Within-Group Residuals: Min Q1 Med Q3 Max -2.1122756 -0.9555906 0.1178097 0.7524579 2.0796542 Number of Observations: 51 Number of Groups: 3 anova(Model_functional_river_random) numDF denDF F-value p-value (Intercept) 1 46 658.0125 &lt;.0001 Habitat 2 46 2.0339 0.1424 emmeans(Model_functional_river_random, pairwise ~ Habitat) $emmeans Habitat emmean SE df lower.CL upper.CL Anth 1.28 0.0576 2 1.029 1.52 Med 1.46 0.0992 2 1.031 1.88 Nat 1.25 0.0663 2 0.965 1.54 Degrees-of-freedom method: containment Confidence level used: 0.95 $contrasts contrast estimate SE df t.ratio p.value Anth - Med -0.1811 0.0945 46 -1.916 0.1456 Anth - Nat 0.0264 0.0692 46 0.381 0.9231 Med - Nat 0.2075 0.1100 46 1.889 0.1533 Degrees-of-freedom method: containment P value adjustment: tukey method for comparing a family of 3 estimates alpha_div_meta &lt;- alpha_div %&gt;% mutate(method=&quot;shotgun&quot;) saveRDS(alpha_div_meta, &quot;resources/metagenomics/metagenome_alpha_div.rds&quot;) 8.2 Amplicon load(&quot;resources/amplicon/data_nocopyfilt.Rdata&quot;) richness &lt;- genome_counts_filt %&gt;% column_to_rownames(var = &quot;genome&quot;) %&gt;% dplyr::select(where(~ !all(. == 0))) %&gt;% hilldiv(., q = 0) %&gt;% t() %&gt;% as.data.frame() %&gt;% dplyr::rename(richness = 1) %&gt;% rownames_to_column(var = &quot;sample&quot;) neutral &lt;- genome_counts_filt %&gt;% column_to_rownames(var = &quot;genome&quot;) %&gt;% dplyr::select(where(~ !all(. == 0))) %&gt;% hilldiv(., q = 1) %&gt;% t() %&gt;% as.data.frame() %&gt;% dplyr::rename(neutral = 1) %&gt;% rownames_to_column(var = &quot;sample&quot;) alpha_div &lt;- richness %&gt;% full_join(neutral, by = join_by(sample == sample)) .table td.tinytable_css_id89mu26n9vl14xzbhsrz5, .table th.tinytable_css_id89mu26n9vl14xzbhsrz5 { border-bottom: solid 0.1em #d3d8dc; } alpha Total Eptesicus Pipistrellus Hypsugo richness 118.843±111.458 186.1±181.768 98.136±100.042 107.421±56.01 neutral 20.651±20.617 31.16±35.431 18.002±17.721 18.187±10.505 "],["beta-diversity.html", "Chapter 9 Beta diversity 9.1 Metagenomics 9.2 Amplicon", " Chapter 9 Beta diversity 9.1 Metagenomics load(&quot;resources/metagenomics/data_filtered.Rdata&quot;) treatment_colors &lt;- c(&quot;#e5bd5b&quot;, &quot;#6b7398&quot;, &quot;#76b183&quot;, &quot;#d57d2c&quot;, &quot;#2a2d26&quot;, &quot;#f9d4cc&quot;, &quot;#3c634e&quot;, &quot;#ea68c3&quot;) load(&quot;resources/metagenomics/beta_filtered.Rdata&quot;) sample_metadata&lt;-sample_metadata %&gt;% filter(!sample %in% c(&quot;H06&quot;, &quot;H20&quot;)) beta_q0n &lt;- genome_counts_filt %&gt;% select(-H06, -H20) %&gt;% column_to_rownames(., &quot;genome&quot;) %&gt;% filter(rowSums(. != 0, na.rm = TRUE) &gt; 0) %&gt;% select_if(~!all(. == 0)) %&gt;% hillpair(., q = 0) beta_q1n &lt;- genome_counts_filt %&gt;% select(-H06, -H20) %&gt;% column_to_rownames(., &quot;genome&quot;) %&gt;% filter(rowSums(. != 0, na.rm = TRUE) &gt; 0) %&gt;% select_if(~!all(. == 0)) %&gt;% hillpair(., q = 1) genome_counts_filt_beta &lt;- genome_counts_filt %&gt;% select(-H06, -H20) %&gt;% column_to_rownames(., &quot;genome&quot;) %&gt;% filter(rowSums(. != 0, na.rm = TRUE) &gt; 0) %&gt;% select_if(~!all(. == 0))%&gt;% rownames_to_column(., &quot;genome&quot;) genome_tree &lt;- keep.tip(genome_tree, tip=genome_counts_filt_beta$genome) beta_q1p &lt;- genome_counts_filt %&gt;% select(-H06, -H20) %&gt;% column_to_rownames(., &quot;genome&quot;) %&gt;% filter(rowSums(. != 0, na.rm = TRUE) &gt; 0) %&gt;% select_if(~!all(. == 0)) %&gt;% hillpair(., q = 1, tree = genome_tree) genome_gifts1 &lt;- genome_gifts[genome_counts_filt_beta$genome,] genome_gifts1 &lt;- genome_gifts1[, colSums(genome_gifts1 != 0) &gt; 0] dist &lt;- genome_gifts1 %&gt;% to.elements(., GIFT_db) %&gt;% traits2dist(., method = &quot;gower&quot;) beta_q1f &lt;- genome_counts_filt %&gt;% select(-H06, -H20) %&gt;% column_to_rownames(., &quot;genome&quot;) %&gt;% filter(rowSums(. != 0, na.rm = TRUE) &gt; 0) %&gt;% select_if(~!all(. == 0)) %&gt;% hillpair(., q = 1, dist = dist) set.seed(2024) 9.1.1 Permanova #Richness betadisper(beta_q0n$S, sample_metadata$Species) %&gt;% permutest(.) Permutation test for homogeneity of multivariate dispersions Permutation: free Number of permutations: 999 Response: Distances Df Sum Sq Mean Sq F N.Perm Pr(&gt;F) Groups 2 0.007116 0.0035580 0.6172 999 0.521 Residuals 46 0.265159 0.0057643 adonis2(beta_q0n$S ~ Species+Species:Habitat, by=&quot;terms&quot;, data = sample_metadata %&gt;% arrange(match(sample,labels(beta_q0n$S))), permutations = 999) %&gt;% broom::tidy() %&gt;% tt() .table td.tinytable_css_idzx3pz3pbmv62nc3kjg8q, .table th.tinytable_css_idzx3pz3pbmv62nc3kjg8q { border-bottom: solid 0.1em #d3d8dc; } term df SumOfSqs R2 statistic p.value Species 2 1.983486 0.09567599 2.460023 0.001 Species:Habitat 4 1.815754 0.08758522 1.125996 0.175 Residual 42 16.932045 0.81673879 NA NA Total 48 20.731286 1.00000000 NA NA pairwise.adonis(beta_q0n$S, sample_metadata$Species, perm = 999) pairs Df SumsOfSqs F.Model R2 p.value p.adjusted sig 1 Eb vs Ha 1 0.9241415 2.303140 0.08435439 0.006 0.018 . 2 Eb vs Pk 1 0.7976225 1.909961 0.05985469 0.015 0.045 . 3 Ha vs Pk 1 1.1978229 2.967307 0.07424335 0.001 0.003 * #Neutral diversity betadisper(beta_q1n$S, sample_metadata$Species) %&gt;% permutest(.) Permutation test for homogeneity of multivariate dispersions Permutation: free Number of permutations: 999 Response: Distances Df Sum Sq Mean Sq F N.Perm Pr(&gt;F) Groups 2 0.05062 0.025309 1.7845 999 0.18 Residuals 46 0.65239 0.014183 adonis2(beta_q1n$S ~ Species+Species:Habitat, by=&quot;terms&quot;, data = sample_metadata %&gt;% arrange(match(sample,labels(beta_q1n$S))), permutations = 999) %&gt;% broom::tidy() %&gt;% tt() .table td.tinytable_css_ideol0iu4qqm9xb60h3ngh, .table th.tinytable_css_ideol0iu4qqm9xb60h3ngh { border-bottom: solid 0.1em #d3d8dc; } term df SumOfSqs R2 statistic p.value Species 2 1.847557 0.08810564 2.219401 0.004 Species:Habitat 4 1.640626 0.07823758 0.985411 0.502 Residual 42 17.481608 0.83365679 NA NA Total 48 20.969790 1.00000000 NA NA adonis2(beta_q1n$S ~ Habitat, by=&quot;terms&quot;, data = sample_metadata %&gt;% arrange(match(sample,labels(beta_q1n$S))), permutations = 999, strata = sample_metadata %&gt;% arrange(match(sample,labels(beta_q1n$S))) %&gt;% pull(Species)) %&gt;% broom::tidy() %&gt;% tt() .table td.tinytable_css_idjpuiace0d60kntlsrpyc, .table th.tinytable_css_idjpuiace0d60kntlsrpyc { border-bottom: solid 0.1em #d3d8dc; } term df SumOfSqs R2 statistic p.value Habitat 2 1.342703 0.06403037 1.573447 0.206 Residual 46 19.627086 0.93596963 NA NA Total 48 20.969790 1.00000000 NA NA adonis2(beta_q1n$S ~ Species, by=&quot;terms&quot;, data = sample_metadata %&gt;% arrange(match(sample,labels(beta_q1n$S))), permutations = 999, strata = sample_metadata %&gt;% arrange(match(sample,labels(beta_q1n$S))) %&gt;% pull(Habitat)) %&gt;% broom::tidy() %&gt;% tt() .table td.tinytable_css_idwar4zft2s3kfv9qvo8ge, .table th.tinytable_css_idwar4zft2s3kfv9qvo8ge { border-bottom: solid 0.1em #d3d8dc; } term df SumOfSqs R2 statistic p.value Species 2 1.847557 0.08810564 2.22222 0.001 Residual 46 19.122233 0.91189436 NA NA Total 48 20.969790 1.00000000 NA NA pairwise.adonis(beta_q1n$S, sample_metadata$Species, perm = 999) pairs Df SumsOfSqs F.Model R2 p.value p.adjusted sig 1 Eb vs Ha 1 0.6553806 1.641956 0.06163044 0.085 0.255 2 Eb vs Pk 1 0.8860212 2.126283 0.06618514 0.009 0.027 . 3 Ha vs Pk 1 1.1405724 2.676921 0.06746797 0.001 0.003 * #Phylogenetic diversity betadisper(beta_q1p$S, sample_metadata$Species) %&gt;% permutest(.) Permutation test for homogeneity of multivariate dispersions Permutation: free Number of permutations: 999 Response: Distances Df Sum Sq Mean Sq F N.Perm Pr(&gt;F) Groups 2 0.08224 0.041119 2.016 999 0.144 Residuals 46 0.93821 0.020396 adonis2(beta_q1p$S ~ Species+Species:Habitat, by=&quot;terms&quot;, data = sample_metadata %&gt;% arrange(match(sample,labels(beta_q1p$S))), permutations = 999) %&gt;% broom::tidy() %&gt;% tt() .table td.tinytable_css_idrodme6nm2qbycvtn8q8h, .table th.tinytable_css_idrodme6nm2qbycvtn8q8h { border-bottom: solid 0.1em #d3d8dc; } term df SumOfSqs R2 statistic p.value Species 2 1.3569381 0.11222405 2.925016 0.001 Species:Habitat 4 0.9923254 0.08206916 1.069528 0.359 Residual 42 9.7420671 0.80570678 NA NA Total 48 12.0913306 1.00000000 NA NA pairwise.adonis(beta_q1p$S, sample_metadata$Species, perm = 999) pairs Df SumsOfSqs F.Model R2 p.value p.adjusted sig 1 Eb vs Ha 1 0.4995597 2.411509 0.08797433 0.023 0.069 2 Eb vs Pk 1 0.3799083 1.538886 0.04879328 0.181 0.543 3 Ha vs Pk 1 1.0473023 4.361940 0.10545783 0.001 0.003 * #Functional diversity betadisper(beta_q1f$S, sample_metadata$Species) %&gt;% permutest(.) Permutation test for homogeneity of multivariate dispersions Permutation: free Number of permutations: 999 Response: Distances Df Sum Sq Mean Sq F N.Perm Pr(&gt;F) Groups 2 0.01953 0.009765 0.2086 999 0.814 Residuals 46 2.15338 0.046813 adonis2(beta_q1f$S ~ Species+Species:Habitat, by=&quot;terms&quot;, data = sample_metadata %&gt;% arrange(match(sample,labels(beta_q1f$S))), permutations = 999) %&gt;% broom::tidy() %&gt;% tt() .table td.tinytable_css_idhjun0k1brlr5nyztr0bv, .table th.tinytable_css_idhjun0k1brlr5nyztr0bv { border-bottom: solid 0.1em #d3d8dc; } term df SumOfSqs R2 statistic p.value Species 2 0.749579 0.07349228 1.878541 0.102 Species:Habitat 4 1.070386 0.10494573 1.341262 0.229 Residual 42 8.379460 0.82156199 NA NA Total 48 10.199425 1.00000000 NA NA 9.1.2 NMDS 9.1.2.1 Richness beta_q0n$S %&gt;% vegan::metaMDS(., trymax = 500, k = 2, trace=0) %&gt;% vegan::scores() %&gt;% as_tibble(., rownames = &quot;sample&quot;) %&gt;% dplyr::left_join(sample_metadata, by = join_by(sample == sample)) %&gt;% group_by(Species) %&gt;% mutate(x_cen = mean(NMDS1, na.rm = TRUE)) %&gt;% mutate(y_cen = mean(NMDS2, na.rm = TRUE)) %&gt;% ungroup() %&gt;% ggplot(aes(x = NMDS1, y = NMDS2, color = Species)) + geom_point(size = 4) + scale_color_manual(values = treatment_colors) + geom_segment(aes(x = x_cen, y = y_cen, xend = NMDS1, yend = NMDS2), alpha = 0.9, show.legend = FALSE) + theme( axis.title = element_text(size = 12, face = &quot;bold&quot;), axis.text = element_text(size = 10), panel.background = element_blank(), axis.line = element_line(size = 0.5, linetype = &quot;solid&quot;, colour = &quot;black&quot;), legend.text = element_text(size = 10), legend.title = element_text(size = 12), legend.position = &quot;right&quot;, legend.box = &quot;vertical&quot; ) + labs(color=&quot;Species&quot;, shape=&quot;Habitat&quot;) #+geom_text_repel(aes(label = sample), size=3) 9.1.2.2 Neutral diversity beta_q1n$S %&gt;% vegan::metaMDS(., trymax = 500, k = 2, trace=0) %&gt;% vegan::scores() %&gt;% as_tibble(., rownames = &quot;sample&quot;) %&gt;% dplyr::left_join(sample_metadata, by = join_by(sample == sample)) %&gt;% group_by(Species) %&gt;% mutate(x_cen = mean(NMDS1, na.rm = TRUE)) %&gt;% mutate(y_cen = mean(NMDS2, na.rm = TRUE)) %&gt;% ungroup() %&gt;% ggplot(aes(x = NMDS1, y = NMDS2, color = Species, shape = as.factor(Habitat))) + geom_point(size = 4) + scale_color_manual(values = treatment_colors) + #,labels=c(&quot;high&quot; = &quot;High-altitude&quot;, &quot;low&quot; = &quot;Low-altitude&quot;) geom_segment(aes(x = x_cen, y = y_cen, xend = NMDS1, yend = NMDS2), alpha = 0.9, show.legend = FALSE) + theme( axis.title = element_text(size = 12, face = &quot;bold&quot;), axis.text = element_text(size = 10), panel.background = element_blank(), axis.line = element_line(size = 0.5, linetype = &quot;solid&quot;, colour = &quot;black&quot;), legend.text = element_text(size = 10), legend.title = element_text(size = 12), legend.position = &quot;right&quot;, legend.box = &quot;vertical&quot; ) + labs(color=&quot;Species&quot;, shape=&quot;Habitat&quot;) #+geom_text_repel(aes(label = sample), size=3) 9.1.2.3 Phylogenetic diversity beta_q1p$S %&gt;% vegan::metaMDS(., trymax = 500, k = 2, trace=0) %&gt;% vegan::scores() %&gt;% as_tibble(., rownames = &quot;sample&quot;) %&gt;% dplyr::left_join(sample_metadata, by = join_by(sample == sample)) %&gt;% group_by(Species) %&gt;% mutate(x_cen = mean(NMDS1, na.rm = TRUE)) %&gt;% mutate(y_cen = mean(NMDS2, na.rm = TRUE)) %&gt;% ungroup() %&gt;% ggplot(aes(x = NMDS1, y = NMDS2, color = Species, shape = as.factor(Habitat))) + geom_point(size = 4) + scale_color_manual(values = treatment_colors,labels=c(&quot;high&quot; = &quot;High-altitude&quot;, &quot;low&quot; = &quot;Low-altitude&quot;)) + geom_segment(aes(x = x_cen, y = y_cen, xend = NMDS1, yend = NMDS2), alpha = 0.9, show.legend = FALSE) + theme( axis.title = element_text(size = 12, face = &quot;bold&quot;), axis.text = element_text(size = 10), panel.background = element_blank(), axis.line = element_line(size = 0.5, linetype = &quot;solid&quot;, colour = &quot;black&quot;), legend.text = element_text(size = 10), legend.title = element_text(size = 12), legend.position = &quot;right&quot;, legend.box = &quot;vertical&quot; ) + labs(color=&quot;Altitude&quot;, shape=&quot;Habitat&quot;) #+geom_text_repel(aes(label = sample), size=3) 9.1.2.4 Functional diversity beta_q1f$S %&gt;% vegan::metaMDS(., trymax = 500, k = 2, trace=0) %&gt;% vegan::scores() %&gt;% as_tibble(., rownames = &quot;sample&quot;) %&gt;% dplyr::left_join(sample_metadata, by = join_by(sample == sample)) %&gt;% group_by(Species) %&gt;% mutate(x_cen = mean(NMDS1, na.rm = TRUE)) %&gt;% mutate(y_cen = mean(NMDS2, na.rm = TRUE)) %&gt;% ungroup() %&gt;% ggplot(aes(x = NMDS1, y = NMDS2, color = Species, shape = as.factor(Habitat))) + geom_point(size = 4) + scale_color_manual(values = treatment_colors,labels=c(&quot;high&quot; = &quot;High-altitude&quot;, &quot;low&quot; = &quot;Low-altitude&quot;)) + geom_segment(aes(x = x_cen, y = y_cen, xend = NMDS1, yend = NMDS2), alpha = 0.9, show.legend = FALSE) + theme( axis.title = element_text(size = 12, face = &quot;bold&quot;), axis.text = element_text(size = 10), panel.background = element_blank(), axis.line = element_line(size = 0.5, linetype = &quot;solid&quot;, colour = &quot;black&quot;), legend.text = element_text(size = 10), legend.title = element_text(size = 12), legend.position = &quot;right&quot;, legend.box = &quot;vertical&quot; ) + labs(color=&quot;Altitude&quot;, shape=&quot;Habitat&quot;) #+geom_text_repel(aes(label = sample), size=3) 9.2 Amplicon load(&quot;resources/amplicon/data_nocopyfilt.Rdata&quot;) genome_metadata &lt;- genome_metadata %&gt;% filter(!is.na(phylum)) genome_counts_filt &lt;- genome_counts_filt %&gt;% filter(genome %in% genome_metadata$genome)%&gt;% mutate_at(vars(-genome),~./sum(.))%&gt;% column_to_rownames(., &quot;genome&quot;) %&gt;% .[,colSums(.)&gt;0.00005] %&gt;% filter(rowSums(across(everything())) != 0) %&gt;% rownames_to_column(., &quot;genome&quot;) genome_metadata &lt;- genome_metadata %&gt;% filter(genome %in% genome_counts_filt$genome) beta_q0n &lt;- genome_counts_filt %&gt;% # select(-H06, -H20) %&gt;% column_to_rownames(., &quot;genome&quot;) %&gt;% filter(rowSums(. != 0, na.rm = TRUE) &gt; 0) %&gt;% select_if(~!all(. == 0)) %&gt;% hillpair(., q = 0) beta_q1n &lt;- genome_counts_filt %&gt;% # select(-H06, -H20) %&gt;% column_to_rownames(., &quot;genome&quot;) %&gt;% filter(rowSums(. != 0, na.rm = TRUE) &gt; 0) %&gt;% select_if(~!all(. == 0)) %&gt;% hillpair(., q = 1) set.seed(2024) 9.2.1 Permanova #Richness betadisper(beta_q0n$S, sample_metadata %&gt;% filter(sample %in% labels(beta_q0n$S)) %&gt;% arrange(match(sample,labels(beta_q0n$S))) %&gt;% pull(Species)) %&gt;% permutest(.) Permutation test for homogeneity of multivariate dispersions Permutation: free Number of permutations: 999 Response: Distances Df Sum Sq Mean Sq F N.Perm Pr(&gt;F) Groups 2 0.007116 0.0035580 0.6172 999 0.521 Residuals 46 0.265159 0.0057643 adonis2(beta_q0n$S ~ Species+Species:Habitat, by=&quot;terms&quot;, data = sample_metadata %&gt;% filter(sample %in% labels(beta_q0n$S)) %&gt;% arrange(match(sample,labels(beta_q0n$S))), permutations = 999) %&gt;% broom::tidy() %&gt;% tt() .table td.tinytable_css_idzx3pz3pbmv62nc3kjg8q, .table th.tinytable_css_idzx3pz3pbmv62nc3kjg8q { border-bottom: solid 0.1em #d3d8dc; } term df SumOfSqs R2 statistic p.value Species 2 1.983486 0.09567599 2.474222 0.001 Species:Habitat 3 1.512093 0.07293774 1.257467 0.057 Residual 43 17.235706 0.83138626 NA NA Total 48 20.731286 1.00000000 NA NA adonis2(beta_q0n$S ~ Species, by=&quot;terms&quot;, data = sample_metadata %&gt;% filter(sample %in% labels(beta_q0n$S)) %&gt;% arrange(match(sample,labels(beta_q0n$S))), permutations = 999) %&gt;% broom::tidy() %&gt;% tt() .table td.tinytable_css_idj0j5wfmy9jypezcbu8n0, .table th.tinytable_css_idj0j5wfmy9jypezcbu8n0 { border-bottom: solid 0.1em #d3d8dc; } term df SumOfSqs R2 statistic p.value Species 2 1.983486 0.09567599 2.433362 0.001 Residual 46 18.747800 0.90432401 NA NA Total 48 20.731286 1.00000000 NA NA pairwise.adonis(beta_q0n$S, sample_metadata %&gt;% filter(sample %in% labels(beta_q0n$S)) %&gt;% arrange(match(sample,labels(beta_q0n$S))) %&gt;% pull(Species), perm = 999) pairs Df SumsOfSqs F.Model R2 p.value p.adjusted sig 1 Eb vs Ha 1 0.9241415 2.303140 0.08435439 0.007 0.021 . 2 Eb vs Pk 1 0.7976225 1.909961 0.05985469 0.014 0.042 . 3 Ha vs Pk 1 1.1978229 2.967307 0.07424335 0.001 0.003 * #Neutral diversity betadisper(beta_q1n$S, sample_metadata %&gt;% filter(sample %in% labels(beta_q0n$S)) %&gt;% arrange(match(sample,labels(beta_q0n$S))) %&gt;% pull(Species)) %&gt;% permutest(.) Permutation test for homogeneity of multivariate dispersions Permutation: free Number of permutations: 999 Response: Distances Df Sum Sq Mean Sq F N.Perm Pr(&gt;F) Groups 2 0.05062 0.025309 1.7845 999 0.192 Residuals 46 0.65239 0.014183 adonis2(beta_q1n$S ~ Species+Species:Habitat, by=&quot;terms&quot;, data = sample_metadata %&gt;% filter(sample %in% labels(beta_q0n$S)) %&gt;% arrange(match(sample,labels(beta_q0n$S))), permutations = 999) %&gt;% broom::tidy() %&gt;% tt() .table td.tinytable_css_idih7l4ze550keu1e1gykm, .table th.tinytable_css_idih7l4ze550keu1e1gykm { border-bottom: solid 0.1em #d3d8dc; } term df SumOfSqs R2 statistic p.value Species 2 1.847557 0.08810564 2.236598 0.002 Species:Habitat 3 1.362016 0.06495134 1.099211 0.284 Residual 43 17.760217 0.84694303 NA NA Total 48 20.969790 1.00000000 NA NA adonis2(beta_q1n$S ~ Species, by=&quot;terms&quot;, data = sample_metadata %&gt;% filter(sample %in% labels(beta_q0n$S)) %&gt;% arrange(match(sample,labels(beta_q0n$S))), permutations = 999) %&gt;% broom::tidy() %&gt;% tt() .table td.tinytable_css_idxe8t5a8srlpbiwz7zn8f, .table th.tinytable_css_idxe8t5a8srlpbiwz7zn8f { border-bottom: solid 0.1em #d3d8dc; } term df SumOfSqs R2 statistic p.value Species 2 1.847557 0.08810564 2.22222 0.003 Residual 46 19.122233 0.91189436 NA NA Total 48 20.969790 1.00000000 NA NA adonis2(beta_q1n$S ~ Habitat, by=&quot;terms&quot;, data = sample_metadata %&gt;% filter(sample %in% labels(beta_q0n$S)) %&gt;% arrange(match(sample,labels(beta_q0n$S))), permutations = 999, strata = sample_metadata %&gt;% filter(sample %in% labels(beta_q0n$S)) %&gt;% arrange(match(sample,labels(beta_q0n$S))) %&gt;% pull(Species)) %&gt;% broom::tidy() %&gt;% tt() .table td.tinytable_css_id3fxnhl7sey3z3kh2jq8o, .table th.tinytable_css_id3fxnhl7sey3z3kh2jq8o { border-bottom: solid 0.1em #d3d8dc; } term df SumOfSqs R2 statistic p.value Habitat 1 0.6348791 0.03027589 1.467394 0.516 Residual 47 20.3349106 0.96972411 NA NA Total 48 20.9697897 1.00000000 NA NA adonis2(beta_q1n$S ~ Species, by=&quot;terms&quot;, data = sample_metadata %&gt;% filter(sample %in% labels(beta_q0n$S)) %&gt;% arrange(match(sample,labels(beta_q0n$S))), permutations = 999, strata = sample_metadata %&gt;% filter(sample %in% labels(beta_q0n$S)) %&gt;% arrange(match(sample,labels(beta_q0n$S))) %&gt;% pull(Species)) %&gt;% broom::tidy() %&gt;% tt() .table td.tinytable_css_idggw50ex5k1vevdgy7dgr, .table th.tinytable_css_idggw50ex5k1vevdgy7dgr { border-bottom: solid 0.1em #d3d8dc; } term df SumOfSqs R2 statistic p.value Species 2 1.847557 0.08810564 2.22222 1 Residual 46 19.122233 0.91189436 NA NA Total 48 20.969790 1.00000000 NA NA pairwise.adonis(beta_q1n$S, sample_metadata %&gt;% filter(sample %in% labels(beta_q0n$S)) %&gt;% arrange(match(sample,labels(beta_q0n$S))) %&gt;% pull(Species), perm = 999) pairs Df SumsOfSqs F.Model R2 p.value p.adjusted sig 1 Eb vs Ha 1 0.6553806 1.641956 0.06163044 0.099 0.297 2 Eb vs Pk 1 0.8860212 2.126283 0.06618514 0.019 0.057 3 Ha vs Pk 1 1.1405724 2.676921 0.06746797 0.002 0.006 * 9.2.2 NMDS 9.2.2.1 Richness beta_q0n$S %&gt;% vegan::metaMDS(., trymax = 500, k = 2, trace=0) %&gt;% vegan::scores() %&gt;% as_tibble(., rownames = &quot;sample&quot;) %&gt;% dplyr::left_join(sample_metadata, by = join_by(sample == sample)) %&gt;% group_by(Species) %&gt;% mutate(x_cen = mean(NMDS1, na.rm = TRUE)) %&gt;% mutate(y_cen = mean(NMDS2, na.rm = TRUE)) %&gt;% ungroup() %&gt;% ggplot(aes(x = NMDS1, y = NMDS2, color = Species, shape = as.factor(Habitat))) + geom_point(size = 4) + scale_color_manual(values = treatment_colors) + geom_segment(aes(x = x_cen, y = y_cen, xend = NMDS1, yend = NMDS2), alpha = 0.9, show.legend = FALSE) + theme( axis.title = element_text(size = 12, face = &quot;bold&quot;), axis.text = element_text(size = 10), panel.background = element_blank(), axis.line = element_line(size = 0.5, linetype = &quot;solid&quot;, colour = &quot;black&quot;), legend.text = element_text(size = 10), legend.title = element_text(size = 12), legend.position = &quot;right&quot;, legend.box = &quot;vertical&quot; ) + labs(color=&quot;Species&quot;, shape=&quot;Habitat&quot;) 9.2.2.2 Neutral diversity beta_q1n$S %&gt;% vegan::metaMDS(., trymax = 500, k = 2, trace=0) %&gt;% vegan::scores() %&gt;% as_tibble(., rownames = &quot;sample&quot;) %&gt;% dplyr::left_join(sample_metadata, by = join_by(sample == sample)) %&gt;% group_by(Species) %&gt;% mutate(x_cen = mean(NMDS1, na.rm = TRUE)) %&gt;% mutate(y_cen = mean(NMDS2, na.rm = TRUE)) %&gt;% ungroup() %&gt;% ggplot(aes(x = NMDS1, y = NMDS2, color = Species, shape = as.factor(Habitat))) + geom_point(size = 4) + scale_color_manual(values = treatment_colors) + #,labels=c(&quot;high&quot; = &quot;High-altitude&quot;, &quot;low&quot; = &quot;Low-altitude&quot;) geom_segment(aes(x = x_cen, y = y_cen, xend = NMDS1, yend = NMDS2), alpha = 0.9, show.legend = FALSE) + theme( axis.title = element_text(size = 12, face = &quot;bold&quot;), axis.text = element_text(size = 10), panel.background = element_blank(), axis.line = element_line(size = 0.5, linetype = &quot;solid&quot;, colour = &quot;black&quot;), legend.text = element_text(size = 10), legend.title = element_text(size = 12), legend.position = &quot;right&quot;, legend.box = &quot;vertical&quot; ) + labs(color=&quot;Species&quot;, shape=&quot;Habitat&quot;)+geom_text_repel(aes(label = sample), size=3) "],["copy-filtering-prevalence.html", "Chapter 10 Copy filtering &amp; prevalence 10.1 Total ASVs 10.2 Single to individuals 10.3 Single to species 10.4 Alpha Diversity", " Chapter 10 Copy filtering &amp; prevalence load(&quot;resources/amplicon/data_nocopyfilt.Rdata&quot;) load(&quot;resources/amplicon/master_table.Rdata&quot;) 10.1 Total ASVs asv_total &lt;- master_table %&gt;% group_by(copy_threshold,prevalence, genome) %&gt;% summarise(asv_count=sum(value != 0, na.rm = TRUE)) %&gt;% group_by(copy_threshold, prevalence) %&gt;% summarise(Total=sum(asv_count != 0, na.rm = TRUE)) master_table %&gt;% group_by(Species,copy_threshold,prevalence) %&gt;% summarise(asv_count=sum(value != 0, na.rm = TRUE)) %&gt;% pivot_wider(names_from = Species, values_from = c(asv_count))%&gt;% left_join(., asv_total, by=join_by(&quot;prevalence&quot;==&quot;prevalence&quot;,&quot;copy_threshold&quot;==&quot;copy_threshold&quot;)) %&gt;% pivot_longer(!c(copy_threshold,prevalence), names_to = &quot;Species&quot;,values_to = &quot;ASVs&quot;) %&gt;% ggplot(aes(x=prevalence,y=ASVs,group=Species, color=Species)) + geom_line(size = 1) + geom_point(size = 2) + facet_wrap(~ copy_threshold, scales = &quot;free_y&quot;)+ labs( x = &quot;Prevalence threshold (%)&quot;, y = &quot;Total ASVs&quot;, color = &quot;Bat species&quot; ) + theme_minimal() 10.2 Single to individuals total_single &lt;- master_table %&gt;% group_by(prevalence,copy_threshold,genome) %&gt;% summarise(freq=sum(pa, na.rm = TRUE), .groups = &quot;drop&quot;) %&gt;% filter(freq==1) %&gt;% group_by(prevalence, copy_threshold)%&gt;% summarise(total=n()) master_table %&gt;% group_by(Species, copy_threshold, prevalence, genome) %&gt;% summarise(freq=sum(pa, na.rm = TRUE), .groups = &quot;drop&quot;) %&gt;% pivot_wider(names_from = Species, values_from = c(freq)) %&gt;% filter(rowSums(across(Eb:Pk)) == 1) %&gt;% pivot_longer(!c(copy_threshold,prevalence,genome), names_to = &quot;Species&quot;,values_to = &quot;single&quot;) %&gt;% filter(single==1) %&gt;% group_by(Species, copy_threshold, prevalence)%&gt;% summarise(single=n())%&gt;% pivot_wider(names_from = Species, values_from = c(single))%&gt;% left_join(., total_single, by=join_by(&quot;prevalence&quot;==&quot;prevalence&quot;,&quot;copy_threshold&quot;==&quot;copy_threshold&quot;)) # A tibble: 10 × 6 # Groups: copy_threshold [5] copy_threshold prevalence Eb Ha Pk total &lt;chr&gt; &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; 1 t0 p0 908 1060 1029 2997 2 t0 p10 1013 NA NA 1013 3 t1 p0 693 894 891 2478 4 t1 p10 795 NA NA 795 5 t2 p0 282 391 378 1051 6 t2 p10 346 NA NA 346 7 t3 p0 71 113 100 284 8 t3 p10 96 NA NA 96 9 t4 p0 5 27 28 60 10 t4 p10 8 NA NA 8 10.3 Single to species master_table %&gt;% group_by(Species, copy_threshold, prevalence, genome) %&gt;% summarise(freq=sum(pa, na.rm = TRUE), .groups = &quot;drop&quot;) %&gt;% pivot_wider(names_from = Species, values_from = c(freq)) %&gt;% mutate(across(c(&quot;Eb&quot;, &quot;Pk&quot;, &quot;Ha&quot;), ~ as.integer(. &gt; 0))) %&gt;% filter(rowSums(across(Eb:Pk)) == 1) %&gt;% pivot_longer(!c(copy_threshold,prevalence,genome), names_to = &quot;Species&quot;,values_to = &quot;unique&quot;) %&gt;% filter(unique==1) %&gt;% group_by(Species, copy_threshold, prevalence)%&gt;% summarise(unique=n())%&gt;% ggplot(aes(x=prevalence,y=unique,group=Species, color=Species)) + geom_line(size = 1) + geom_point(size = 2) + facet_wrap(~ copy_threshold, scales = &quot;free_y&quot;)+ labs( x = &quot;Prevalence threshold (%)&quot;, y = &quot; Single to species&quot;, color = &quot;Bat species&quot; ) + theme_minimal() 10.4 Alpha Diversity prev_threshold&lt;- c(&quot;p0&quot;, &quot;p10&quot;, &quot;p20&quot;,&quot;p30&quot;, &quot;p40&quot;) copy_threshold &lt;- c(&quot;t0&quot;, &quot;t1&quot;, &quot;t2&quot;, &quot;t3&quot;, &quot;t4&quot;) bats &lt;- c(&quot;Eb&quot;, &quot;Pk&quot;, &quot;Ha&quot;) results &lt;- data.frame( alpha = character(), Total = numeric(), Eptesicus=character(), Pipistrellus=character(), Hypsugo=character(), Copy_threshold=character(), Prevalence=character() ) for (copy in copy_threshold) { genome_table &lt;- master_table %&gt;% filter(copy_threshold==copy) %&gt;% select(-copy_threshold,-pa) %&gt;% pivot_wider(names_from = genome, values_from = value) for (prev in prev_threshold) { prev_table &lt;- genome_table %&gt;% filter(prevalence==prev) %&gt;% select(-Species, -prevalence) %&gt;% column_to_rownames(., &quot;sample&quot;) %&gt;% filter(rowSums(across(everything())) != 0) %&gt;% t() %&gt;% as.data.frame() richness &lt;- prev_table %&gt;% dplyr::select(where(~ !all(. == 0))) %&gt;% hilldiv(., q = 0) %&gt;% t() %&gt;% as.data.frame() %&gt;% dplyr::rename(richness = 1) %&gt;% rownames_to_column(var = &quot;sample&quot;) neutral &lt;- prev_table %&gt;% dplyr::select(where(~ !all(. == 0))) %&gt;% hilldiv(., q = 1) %&gt;% t() %&gt;% as.data.frame() %&gt;% dplyr::rename(neutral = 1) %&gt;% rownames_to_column(var = &quot;sample&quot;) alpha_div &lt;- richness %&gt;% full_join(neutral, by = join_by(sample == sample)) div &lt;- alpha_div %&gt;% pivot_longer(-sample, names_to = &quot;alpha&quot;, values_to = &quot;value&quot;) %&gt;% left_join(sample_metadata, by = join_by(sample == sample)) %&gt;% group_by(alpha)%&gt;% summarise(total_mean=mean(value, na.rm=T), total_sd=sd(value, na.rm=T), Eb_mean=mean(value[Species==&quot;Eb&quot;], na.rm=T), Eb_sd=sd(value[Species==&quot;Eb&quot;], na.rm=T), Ha_mean=mean(value[Species==&quot;Ha&quot;], na.rm=T), Ha_sd=sd(value[Species==&quot;Ha&quot;], na.rm=T), Pk_mean=mean(value[Species==&quot;Pk&quot;], na.rm=T), Pk_sd=sd(value[Species==&quot;Pk&quot;], na.rm=T)) %&gt;% mutate(Total=str_c(round(total_mean,3),&quot;±&quot;,round(total_sd,3)), Eptesicus=str_c(round(Eb_mean,3),&quot;±&quot;,round(Eb_sd,3)), Hypsugo=str_c(round(Ha_mean,3),&quot;±&quot;,round(Ha_sd,3)), Pipistrellus=str_c(round(Pk_mean,3),&quot;±&quot;,round(Pk_sd,3))) %&gt;% dplyr::select(alpha,Total,Eptesicus,Pipistrellus,Hypsugo) %&gt;% mutate(Prevalence=prev) %&gt;% mutate(Copy_threshold=copy) %&gt;% as.data.frame() results &lt;- rbind(results, div) } } results &lt;- results %&gt;% mutate(across(everything(), ~ ifelse(is.na(.), 0, .))) # Create the Faceted Line Plot results %&gt;% pivot_longer(!c(alpha, Prevalence, Copy_threshold), names_to = &quot;Species&quot;,values_to = &quot;value&quot;) %&gt;% filter(alpha==&quot;richness&quot;) %&gt;% ggplot(., aes(x = Prevalence, y = as.numeric(gsub(&quot;±.*&quot;, &quot;&quot;, value)), group = Species, color = Species)) + geom_line(size = 1) + geom_point(size = 2) + facet_wrap(~ Copy_threshold, scales = &quot;free_y&quot;) + labs( title = &quot;Alpha Diversity Across Copy filtering and Prevalence Thresholds&quot;, x = &quot;Prevalence Threshold&quot;, y = &quot;Richness&quot;, color = &quot;Species&quot; ) + theme_minimal() + theme( strip.text = element_text(size = 12, face = &quot;bold&quot;), axis.text.x = element_text(angle = 45, hjust = 1), legend.position = &quot;bottom&quot; ) # Create the Faceted Line Plot results %&gt;% pivot_longer(!c(alpha, Prevalence, Copy_threshold), names_to = &quot;Species&quot;,values_to = &quot;value&quot;) %&gt;% filter(alpha==&quot;neutral&quot;) %&gt;% ggplot(., aes(x = Prevalence, y = as.numeric(gsub(&quot;±.*&quot;, &quot;&quot;, value)), group = Species, color = Species)) + geom_line(size = 1) + geom_point(size = 2) + facet_wrap(~ Copy_threshold, scales = &quot;free_y&quot;) + labs( title = &quot;Alpha Diversity Across Copy filtering and Prevalence Thresholds&quot;, x = &quot;Prevalence Threshold&quot;, y = &quot;Neutral&quot;, color = &quot;Species&quot; ) + theme_minimal() + theme( strip.text = element_text(size = 12, face = &quot;bold&quot;), axis.text.x = element_text(angle = 45, hjust = 1), legend.position = &quot;bottom&quot; ) 10.4.1 Comparison alpha diversity: amplicom different threshold vs metagenomics #Create alpha table prev_threshold&lt;- c(&quot;p0&quot;, &quot;p10&quot;, &quot;p20&quot;,&quot;p30&quot;, &quot;p40&quot;) copy_threshold &lt;- c(&quot;t0&quot;, &quot;t1&quot;, &quot;t2&quot;, &quot;t3&quot;, &quot;t4&quot;) bats &lt;- c(&quot;Eb&quot;, &quot;Pk&quot;, &quot;Ha&quot;) alpha_both &lt;- data.frame( alpha = character(), Total = numeric(), Eptesicus=character(), Pipistrellus=character(), Hypsugo=character(), Copy_threshold=character(), Prevalence=character() ) for (copy in copy_threshold) { genome_table &lt;- master_table %&gt;% filter(copy_threshold==copy) %&gt;% select(-copy_threshold,-pa) %&gt;% pivot_wider(names_from = genome, values_from = value) for (prev in prev_threshold) { prev_table &lt;- genome_table %&gt;% filter(prevalence==prev) %&gt;% select(-Species, -prevalence) %&gt;% column_to_rownames(., &quot;sample&quot;) %&gt;% filter(rowSums(across(everything())) != 0) %&gt;% t() %&gt;% as.data.frame() richness &lt;- prev_table %&gt;% dplyr::select(where(~ !all(. == 0))) %&gt;% hilldiv(., q = 0) %&gt;% t() %&gt;% as.data.frame() %&gt;% dplyr::rename(richness = 1) %&gt;% rownames_to_column(var = &quot;sample&quot;) neutral &lt;- prev_table %&gt;% dplyr::select(where(~ !all(. == 0))) %&gt;% hilldiv(., q = 1) %&gt;% t() %&gt;% as.data.frame() %&gt;% dplyr::rename(neutral = 1) %&gt;% rownames_to_column(var = &quot;sample&quot;) alpha_div &lt;- richness %&gt;% full_join(neutral, by = join_by(sample == sample)) div &lt;- alpha_div %&gt;% mutate(prevalence=prev) %&gt;% mutate(copy_threshold=copy) %&gt;% as.data.frame() alpha_both &lt;- rbind(alpha_both, div) } } alpha_both &lt;- alpha_both %&gt;% mutate(method=&quot;16S&quot;) write_csv(alpha_both,&quot;resources/amplicon/alpha_twothreshold_table.csv&quot;) metagenome_alpha_div &lt;- readRDS(&quot;resources/metagenomics/metagenome_alpha_div.rds&quot;) %&gt;% select(sample, richness, neutral, method) prev_threshold&lt;- c(&quot;p0&quot;, &quot;p10&quot;, &quot;p20&quot;,&quot;p30&quot;, &quot;p40&quot;) copy_threshold &lt;- c(&quot;t0&quot;, &quot;t1&quot;, &quot;t2&quot;, &quot;t3&quot;, &quot;t4&quot;) wilcox_results_table &lt;- data.frame( Copy_threshold = character(), Prevalence = character(), W_statistic = numeric(), P_value = numeric(), stringsAsFactors = FALSE ) for (copy in copy_threshold) { alpha_Filt &lt;- alpha_both %&gt;% filter(copy_threshold==copy) %&gt;% select(-copy_threshold) for (prev in prev_threshold) { all_result &lt;- alpha_Filt %&gt;% filter(prevalence==prev) %&gt;% select(-prevalence) %&gt;% rbind(., metagenome_alpha_div) %&gt;% group_by(sample) %&gt;% summarize( shotgun = richness[method == &quot;shotgun&quot;], m_16S = richness[method == &quot;16S&quot;] ) %&gt;% summarize(wilcox_result = list(wilcox.test(shotgun, m_16S, paired = TRUE))) wilcox_test &lt;- all_result$wilcox_result[[1]] wilcox_results_table &lt;- wilcox_results_table %&gt;% add_row( Copy_threshold = copy, Prevalence= prev, W_statistic = wilcox_test$statistic, P_value = wilcox_test$p.value ) } } wilcox_results_table %&gt;% tt() .table td.tinytable_css_id6514d1ry7o0n7yakjj20, .table th.tinytable_css_id6514d1ry7o0n7yakjj20 { border-bottom: solid 0.1em #d3d8dc; } Copy_threshold Prevalence W_statistic P_value t0 p0 4.5 6.918345e-10 t0 p10 21.5 1.868390e-09 t0 p20 109.0 3.423462e-07 t0 p30 370.5 1.003012e-02 t0 p40 0.0 1.000000e+00 t1 p0 4.5 6.918345e-10 t1 p10 24.0 2.157902e-09 t1 p20 128.0 5.360065e-07 t1 p30 386.0 1.531224e-02 t1 p40 0.0 NaN t2 p0 8.0 8.488810e-10 t2 p10 52.0 2.497928e-08 t2 p20 358.0 2.957315e-02 t2 p30 1.0 1.000000e+00 t2 p40 1.0 1.000000e+00 t3 p0 281.0 5.847077e-04 t3 p10 0.0 1.000000e+00 t3 p20 1.0 1.000000e+00 t3 p30 1.0 1.000000e+00 t3 p40 1.0 1.000000e+00 t4 p0 794.0 2.365845e-06 t4 p10 1.0 1.000000e+00 t4 p20 1.0 1.000000e+00 t4 p30 1.0 1.000000e+00 t4 p40 1.0 1.000000e+00 "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
